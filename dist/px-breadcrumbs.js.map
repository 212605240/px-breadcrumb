{"version":3,"sources":["px-breadcrumbs.es6.js"],"names":["Polymer","is","properties","breadcrumbData","type","Array","value","_mainPathItems","readOnly","_clickPathItem","Object","_clickedItemChildren","_isDropdownHidden","Boolean","_selectedItem","_ulWidth","Number","_selectedItemPath","clickOnlyMode","filterMode","_filterString","String","_hideNoResultLi","behaviors","IronResizableBehavior","listeners","observers","attached","document","addEventListener","_onCaptureClick","bind","detached","removeEventListener","_onDomChange","dropdownList","dom","root","querySelector","children","length","set","_filterSiblings","toLowerCase","item","source","text","indexOf","evt","normalizedEvent","filteredPathList","path","filter","evtPathItem","nodeName","_closeDropdown","_calculatePathItemClass","pathItem","_calculatePath","selectedItem","graph","_set_selectedItemPath","getPathToItem","_onResize","_getContainerSize","debounce","window","requestAnimationFrame","breadcrumbsContainer","breadcrumbsUlContainer","bcUlContainerRect","getBoundingClientRect","width","_rebuildBreadcrumbsDisplayOptions","itemPath","breadcrumbsObj","Breadcrumbs","sizeOfFullBreadcrumbs","_set_mainPathItems","sizeOfAllShortenedItemsExcludingLastItem","sizeOfFullLastItem","strArrayShortenedWithFullLastItem","allShortenedItemsExcludingLast","concat","lastItemFull","sizeOfAllShortenedItems","strArrayShortened","shortenedItems","_createArrayWithOverflow","strArray","pointer","currentAccumSize","sizeOfEllipsis","noRoomForFullLastItem","lastItem","overflowObj","slicedStrArray","removedSize","sizeOfIndividualShortItem","slice","forEach","child","highlighted","lastItemShort","_isNotFirstItemInData","index","_normalizePathClickTarget","target","_iconsetName","parentNode","prepareData","breadcrumbsData","Graph","_doesItemHaveSiblings","itemInPath","isItemOverflow","hasSiblings","_dropdownTap","newSelectItem","model","_changePathFromClick","fire","_resetFilter","_calculateDropdownItemClass","_onPathTap","dataItem","isClickedItemOverflow","siblings","getSiblings","map","sibling","_changeDropdownPosition","normalizedTarget","targetRect","targetLeft","left","targetBottom","bottom","targetHeight","height","windowScrollX","scrollX","pageXOffset","windowScrollY","scrollY","pageYOffset","dropdown","console","log","style","cssText","_notifyClick","composed","_isFilteredMode","_isClickOnlyMode","breadcrumbs","WeakMap","ctx","_createCanvas","_preShortenItems","cachedItem","get","items","_getShortenedText","shortText","substr","fullSize","parseInt","measureText","shortSize","useFullSize","accum","i","len","sizeOfItem","_sizeOfIndividualFullItem","canvas","createElement","getContext","font","__sizeOfFullBreadcrumbs","_calculateSizeOfBreadcrumbs","__shortenedItems","wrapper","isTruncated","hasChildren","nodes","_crawlGraph","recursiveLoopThroughObj","parent","metaData","call","selectedItemPath","undefined"],"mappings":"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","file":"px-breadcrumbs.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-breadcrumbs', \n\n    properties: {\n      /**\n       * This array receives/holds the data that will be transformed into the breadcrumbs.\n       */\n      breadcrumbData: {\n        type: Array,\n        value: function() {return [];}\n      },\n      /**\n       * This property holds the dynamically generated items (full or shortened, depending on the display options) that are used for the dom repeat,\n       * which draws the main path items. It is read only and can ONLY be changed by the _rebuildBreadcrumbsDisplayOptions function to make sure it's not changed anywhere else.\n       */\n      _mainPathItems: {\n        type: Array,\n        value: function() {return [];},\n        readOnly: true\n      },\n      /**\n       * This property holds the latest clicked top path item.\n       */\n      _clickPathItem: {\n        type: Object,\n        value: function() {return {};}\n      },\n      /**\n       * This property holds all the items that are to be shown in the dropdown - these are usually siblings, \n       * but can be children if the item is an overflow item.\n       */\n      _clickedItemChildren: {\n        type: Array,\n        value: function() {return [];},\n      },\n      /**\n       * This Property is used to determine whether the dropdown is hidden or shown.\n       */\n      _isDropdownHidden: {\n        type: Boolean,\n        value: true\n      },\n      /**\n       * This property holds the currently selectedItem. We start out with no value to avoid have it run through an empty object.\n       */\n      _selectedItem: {\n        type: Object\n      },\n      /**\n       * This property holds the size of the container, against which we make all of our calculations in \n       * breadcrumbs display options.\n       * The value is auto generated either on page load, or on page resize.\n       */\n      _ulWidth: {\n        type: Number,\n        value: 0\n      },\n      /**\n       * This property holds the path to the currently selected item.\n       * This is generated dynamically by the graph whenever the _selectedItem prop changes.\n       * It is readOnly to ensure that nothing but 1 process changes it.\n       */\n      _selectedItemPath: {\n        type: Array,\n        value: function() {return [];},\n        readOnly: true\n      },\n      /**\n       * Use this mode if you want a more traditional breadcrumb path, and don't want the dropdowns to show up when a path item is clicked.\n       */\n      clickOnlyMode: {\n        type: Boolean,\n        value: false\n      },\n      filterMode: {\n        type: Boolean,\n        value: false\n      },\n      _filterString: {\n        type: String,\n        value: ''\n      },\n      _hideNoResultLi: {\n        type: Boolean,\n        value: true\n      }\n    },\n    behaviors: [Polymer.IronResizableBehavior],\n    listeners: {\n      'iron-resize': '_onResize'\n    },\n    observers: [\n      '_calculatePath(_selectedItem)', \n      '_rebuildBreadcrumbsDisplayOptions(_selectedItemPath, _ulWidth)',\n      'prepareData(breadcrumbData)'\n      ],\n    attached() {\n      document.addEventListener('click', this._onCaptureClick.bind(this));\n    },\n    detached() {\n      document.removeEventListener('click', this._onCaptureClick.bind(this));\n    },\n    /**\n     * This method is called everytime the dom-repeat in the dropdown list is rendered.\n     * it checks whether there are results (more than just the dom-repeat template)\n     */\n    _onDomChange() {\n      var dropdownList = Polymer.dom(this.root).querySelector('.dropdownList');\n      if (dropdownList.children.length === 2) {\n       this.set('_hideNoResultLi', false); \n      } else {\n        this.set('_hideNoResultLi', true); \n      }\n    },\n    _filterSiblings(_filterString) {\n      \n      if (!_filterString) return false;\n\n      _filterString = _filterString.toLowerCase();\n      return function(item) {\n        item = item.source ? item.source : item;\n        return item.text.toLowerCase().indexOf(_filterString) > -1;\n      }\n    },\n    /**\n     * This method captures all clicks, and determines where they come from, and whether the dropdown needs to be closed.\n     * @param {Object} evt \n     */\n    _onCaptureClick(evt) {\n      \n      //we look through the path to see if the click came anywhere from inside our component by filtering anything that isn't PX-BREADCRUMBS\n      var normalizedEvent = Polymer.dom(evt),\n          filteredPathList =  normalizedEvent.path.filter((evtPathItem) => {\n        return evtPathItem.nodeName === \"PX-BREADCRUMBS\";\n      });\n      \n      //then we check to see if the length is empty - if it is, that means the click did NOT come from inside our component, which makes it an outside click.\n      if (!filteredPathList.length){\n        //if it's an outside click and the dropdown is open, we want to close it.\n        if (!this._isDropdownHidden) {\n          this._closeDropdown();\n        }\n      }\n    },\n    /**\n     * This method checks whether the item that was passed in is the same one that is registered as the clicked one, and \n     * if so, returns the 'opened' class.\n     * @param {Object} pathItem the item we are checking the class for\n     */\n    _calculatePathItemClass(pathItem) {\n      pathItem = pathItem.source ? pathItem.source : pathItem;\n      return (this._clickPathItem === pathItem) ? 'opened': '';\n    },\n    /**\n     * This method is called automatically whenever the user changes the _selectedItem, or on initial page load, when we find the \n     * initial _selectedItem.\n     * it ends up setting up the value of the readonly property _selectedItemPath from the graph.\n     * @param {Object} selectedItem the item that was either clicked on, or passed in as a selectedItem from the beginning.\n     */\n    _calculatePath(selectedItem) {\n      var graph = this.graph;\n      this._set_selectedItemPath(graph.getPathToItem(selectedItem));\n    },\n    /**\n     * This method is called by iron-resize. It hides/clears out the dropdown menu, and gets the container size to start the display options process.\n     */\n    _onResize() {\n      this.set('_isDropdownHidden', true);\n      this.set('_clickPathItem', {});\n      this.set('_clickedItemChildren', []);\n      this._getContainerSize();\n    },\n    /**\n     * This method is called on initial page load, and on every page resize\n     * to find the width of the container after a draw. we have an observer on _ulWidth that rebuilds the display options automatically.\n     */\n    _getContainerSize() {\n      this.debounce('windowResize', () => {\n        window.requestAnimationFrame(() => {\n          var breadcrumbsContainer = Polymer.dom(this.root).querySelector('.container'),\n              breadcrumbsUlContainer = Polymer.dom(breadcrumbsContainer).querySelector('ul'),\n              bcUlContainerRect = breadcrumbsContainer.getBoundingClientRect();\n\n          this.set('_ulWidth', bcUlContainerRect.width + 4); //the 4 is for the padding (2px on each side) on the ul.\n        });\n      },10);\n      \n    },\n    /* \n    * in this method, we decide on the display options for the breadcrumbs. \n    * we have the following options:\n    * 1. nothing needs to be shortened.\n    * 2. we can shorten all but the last one\n    * 2. we can shorten all including the last one\n    * 3. we can shorten all of them, and include the overflow at the beginning of the array. the last one is NOT shortened by default, but can be shortened as needed.\n    * @param {array} strArray an array of objects, which contains the breadcrumbs\n    */\n    _rebuildBreadcrumbsDisplayOptions() {\n\n      var itemPath = this._selectedItemPath || [],\n          graph = this.graph,\n          _ulWidth = this._ulWidth;\n\n      if (!itemPath.length || !graph || !_ulWidth) return;\n\n      var breadcrumbsObj = new Breadcrumbs(itemPath, graph);\n\n        /*\n        * option 1 \n        * we check to see if the container (which is sized automatically to fill out the page)\n        * can fit all the items in the breadcrumbs.\n        * the first option is the simpliest one - everything just fits, but if it doesn't fit...\n        */\n        if (_ulWidth > breadcrumbsObj.sizeOfFullBreadcrumbs) {\n          //everything fits, no need to shorten anything\n          this._set_mainPathItems(itemPath);\n          return;\n        }\n\n        /*\n        * option 2\n        * we want to find out if the container can now fit all the \n        * shortened items + the last Item that wasn't shortened\n        */\n        if (_ulWidth > breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem + breadcrumbsObj.sizeOfFullLastItem) {\n          \n          let strArrayShortenedWithFullLastItem = breadcrumbsObj.allShortenedItemsExcludingLast.concat(breadcrumbsObj.lastItemFull);\n          this._set_mainPathItems(strArrayShortenedWithFullLastItem);\n          return;\n        }\n\n        /*\n        * option 3 \n        * we check if we can fit after we've shortened all the items \n        */\n        if (_ulWidth > breadcrumbsObj.sizeOfAllShortenedItems) {\n          let strArrayShortened = breadcrumbsObj.shortenedItems;\n          \n          this._set_mainPathItems(strArrayShortened);\n          return;\n        }\n\n        /*\n        * option 4\n        * we have to create an array with overflow.\n        * we only get to this if non of the if statements above are true.\n        */\n      \n        this._set_mainPathItems(this._createArrayWithOverflow(itemPath, _ulWidth, breadcrumbsObj));\n\n    },\n    /*\n    * this method is called once we've established that we need to have an\n    * array with overflow.\n    * we keep removing the size of items - starting from the beginning of the array - \n    * from the total size of all the items, until we can fit everything + the last item that isn't shortened\n    * into the container.\n    * @param {Array} strArray the array that holds the breadcrumbs\n    * @param {number} _ulWidth the width of the ul container\n    */\n    _createArrayWithOverflow(strArray, _ulWidth, breadcrumbsObj) {\n      \n      var pointer = 0,\n          currentAccumSize = breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem,\n          sizeOfFullLastItem = breadcrumbsObj.sizeOfFullLastItem,\n          sizeOfEllipsis = breadcrumbsObj.sizeOfEllipsis,\n          noRoomForFullLastItem = false,\n          lastItem = {},\n          overflowObj = {\"text\": \"...\", \"hasChildren\": true},\n          slicedStrArray = [];\n\n      //keep looping until all the items fit into the container\n      while (_ulWidth < sizeOfEllipsis + currentAccumSize + sizeOfFullLastItem) {\n        //if we made it to the last item, and it's STILL can't fit, break out of the \n        // while loop, to ensure the last items doesn't go into the overflow object.\n        if (pointer === strArray.length-1) {\n          noRoomForFullLastItem = true;\n          break\n        }\n        //get the size of the item we are placing into the overflow\n        var removedSize = breadcrumbsObj.sizeOfIndividualShortItem(strArray[pointer]);\n        // subtract the size from the overall accumulated size\n        currentAccumSize -= removedSize;\n        //and make sure to manually change our pointer.\n        pointer++;\n      }\n      \n      \n\n      //create the overflow object, and populate its children with the shortened strings (if necessary)\n      overflowObj.children = strArray.slice(0, pointer);\n\n      // clean up - in case the user clicked on the path, there will be a highlighted property set to true.\n      // since overflow shouldn't have anything highlighted, we clear is up, just to be sure.\n      overflowObj.children.forEach((child) => {\n          child.highlighted = false;\n      });\n      //the last item is usually full size, but, if if it's just the overflow and the last item\n      // and the last item is too long, it should shortened.\n      lastItem  = (noRoomForFullLastItem) ? breadcrumbsObj.lastItemShort : breadcrumbsObj.lastItemFull;\n      \n      //add the overflow obj to the beginning of the array, and follow it up with all the shortened strings, \n      //starting with the point we stopped at with the pointer, and going till the last item, which is dynamically determined.\n      slicedStrArray = [overflowObj].concat(breadcrumbsObj.shortenedItems.slice(pointer, strArray.length-1)).concat(lastItem);\n      \n      return slicedStrArray;\n\n    },\n    /**\n     * This function is used to determine whether we are on the first Item in the array - used by a dom-if to check \n     * if we should display the right angle (yes on all but the first one)\n     * @param {Number} index the index of the item\n     */\n    _isNotFirstItemInData(index) {\n      return index !== 0;\n    },\n\n    /**\n     * This method is used to determine where the path click came from - we have 3 different options, \n     * 1. the text\n     * 2. the down chevron\n     * 3. The side chevron\n     * but we really want the encompossing LI, regardless of what was clicked. \n     * the two icons have a _iconsetName property that is 'fa' so we use that to determine if they were clicked, \n     * and if so, grab their parent, which is the LI.\n     * @param {*} evt the event generated by the user tap\n     */\n    _normalizePathClickTarget(evt) {\n      return (evt.target._iconsetName === 'fa') ? evt.target.parentNode.parentNode : evt.target;\n    },\n    /**\n     *  \n     * This method is called whenever breadcrumbsData is changed - which is either on load, \n     * or if the developer hands us an updated path. it is the ONLY thing that creates the graph \n     * and sets it on the component, as well as set the _selectedItem initially.\n     * @param {Object} breadcrumbsData a JS Object that holds the breadcrumbs data.\n     */\n    prepareData(breadcrumbsData) {\n        if (!breadcrumbsData.length) return;\n\n        var graph = new Graph(this.breadcrumbData, this);\n        \n        this.set('graph', graph);\n        this.set('_selectedItem', graph.selectedItem);\n    },\n    /**\n     * This function checks whether the item in question has siblings.\n     * if the item is an overflow item, we return a false, since it's not going to be in the graph anyway.\n     * @param {*} itemInPath \n     */\n    _doesItemHaveSiblings(itemInPath) {\n      var graph = this.graph,\n          source = itemInPath.source ? itemInPath.source : itemInPath,\n          isItemOverflow = itemInPath.text === '...' ? true : false;\n\n      return (!isItemOverflow)  ? graph.hasSiblings(source) : false;\n    },\n    /**\n     * \n     * we consider a dropdown tap an event that changes the path. \n     * We make sure to pass the correct item into the graph by using the source property,\n     * after we hide the dropdown and reset the last clicked item.\n     * \n     * @param {Object} evt the click event from the dropdown item clicked\n     */\n    _dropdownTap(evt) {\n      var newSelectItem = evt.model.item.source ? evt.model.item.source : evt.model.item;\n      //this._setSelectedItem(newSelectItem);\n      //this hides the dropdown\n      this._closeDropdown();\n      this._changePathFromClick(newSelectItem);\n    },\n    /**\n     * This event is fired whenever a click occurs - from a top path item, or dropdown item - \n     * that changes the context. The new context is attached as 'item' \n     * @event px-breadcrumbs-item-changed\n     */\n    /**\n     * This method sets the _selectedItem to the item that was clicked - whether from the main path items, or the dropdown items\n     * this is the only place we change _selectedItem on click.\n     */\n    _changePathFromClick(item) {\n      this.set('_selectedItem', item);\n      this.fire('px-breadcrumbs-item-changed', item);\n    },\n    _closeDropdown() {\n        this.set('_isDropdownHidden', true);\n        this.set('_clickedItemChildren', []);\n        this.set('_clickPathItem', {});\n        if (this.filterMode) this._resetFilter();\n    },\n    _resetFilter() {\n      this.set('_filterString','');\n    },\n    _calculateDropdownItemClass(item) {\n      return (item.highlighted) ? 'highlighted' : '';\n    },\n    /* \n    * on tap, we need to find out if the clicked item is the same as before.\n    * if it is, we empty our the dropdown, hide it, and clear the _clickPathItem (the last item clicked).\n    * if it is not the same item that was previously clicked, we save the new clicked item into _clickPathItem\n    * set the siblings according to the item, show the dropdown and adjust the positioning for it.\n    * sometimes, a top path item has no siblings, at which point we treat the click like a dropdown click - which is to say\n    * we change the path accordingly.\n    */\n    _onPathTap(evt) {\n      var dataItem = evt.model.item.source ? evt.model.item.source : evt.model.item;\n      //if the click only mode is on, just change the path\n      if (this.clickOnlyMode) {\n        this._changePathFromClick(dataItem);\n        return;\n      }\n\n      //if the item that is clicked is the open option, hide the dropdown, and reset the _clickPathItem object.\n      if (this._clickPathItem === dataItem) {\n        this._closeDropdown();\n        return;\n      }\n\n      // it's important to check if the clicked item is an overflow item, since it's the only one\n      // that isn't in our graph - if we send it into getSiblings, the graph won't know what to do with it.\n      // instead, if it IS an overflow item, we set the siblings as the children of dataItem.\n      var isClickedItemOverflow = dataItem.text ==='...' ? true : false;\n\n      if (this._doesItemHaveSiblings(dataItem) || isClickedItemOverflow) {\n        var graph = this.graph,\n            siblings = !isClickedItemOverflow ? graph.getSiblings(dataItem) : dataItem.children;\n        \n        //if the item is the same as the dataItem, we want to highlight it.\n        // we also want to make sure any previous highlighting is removed.\n        siblings = siblings.map((sibling) => {\n          sibling.highlighted = false;\n          if (sibling === dataItem) {\n            sibling.highlighted = true;\n          }\n          return sibling;\n        });\n        \n        if (this.filterMode) this._resetFilter();\n\n        this.set('_clickedItemChildren', siblings);\n        this.set('_clickPathItem', dataItem);\n        this._changeDropdownPosition(evt);\n        this.set('_isDropdownHidden', false);\n        \n      // the clicked item has no siblings - we reset the contents of the dropdown\n      // and change the path accordingly.\n    } else {\n        this._closeDropdown(); //just in case a dropdown is open.\n        this.set('_clickedItemChildren', []);\n        this._changePathFromClick(dataItem);\n      }\n    },\n    /**\n     * the dropdown is dynamically positioned - we find out the top and left of the clicked item,\n     * and position the dropdown accordingly.\n     * @param {Object} positioning an object which holds the new positioning for the dropdown\n     */\n    _changeDropdownPosition(evt) {\n      var normalizedTarget = this._normalizePathClickTarget(evt),\n          targetRect = normalizedTarget.getBoundingClientRect(),\n          targetLeft = targetRect.left,\n          targetBottom = targetRect.bottom,\n          targetHeight = targetRect.height,\n          windowScrollX = window.scrollX || window.pageXOffset,\n          windowScrollY = window.scrollY || window.pageYOffset,\n          dropdown = Polymer.dom(this.root).querySelector('.breadCrumbDropdown');\n          console.log('targetBottom = ' + targetBottom);\n          console.log('windowScrollY = ' + windowScrollY);\n      dropdown.style.cssText =\"top:\" +  (targetBottom + windowScrollY + 12) + \"px;\" + \" left: \" + (targetLeft + windowScrollX - 10) + \"px\"; //remember to add the padding to push it down, and rememeber to subtract the padding from the left\n       \n    },\n    /**\n     * This method dispatches a custom event ('px-breadcrumbs-item-clicked') that has the item attached to it.\n     * the 'composed: true' property makes it so the event passes through shadow dom boundaries.\n     * @param {*} item the item that was clicked on.\n     */\n    _notifyClick(item) {\n      this.fire('px-breadcrumbs-item-clicked', {item: item, composed: true});\n    },\n    /**\n     * This method returns the status of the filter-mode\n     */\n    _isFilteredMode() {\n      return this.filterMode;\n    },\n    /**\n     * This method returns the status of the click-only-mode\n     */\n    _isClickOnlyMode() {\n      return this.clickOnlyMode;\n    }\n  });\n  \n  class Breadcrumbs {\n    constructor(breadcrumbs = [], graph) {\n      this.graph = graph;\n      this.breadcrumbs = breadcrumbs;\n      this.map = new WeakMap();\n      this.ctx = this._createCanvas();\n      this._preShortenItems(this.breadcrumbs);\n      return this;\n    }\n    \n    /**\n     * a getter that returns the size of the breadcrumb items - unshortened.\n     * it checks to see if it has a value, and if so, returns the cached one, so we don't have to calculate the value again.\n     */\n    get sizeOfFullBreadcrumbs() {\n      this.__sizeOfFullBreadcrumbs = this.__sizeOfFullBreadcrumbs || this._calculateSizeOfBreadcrumbs(this.breadcrumbs);\n      return this.__sizeOfFullBreadcrumbs;\n    }\n    /**\n     * a getter that returns the short size of the breadcrumb items excluding the last item. \n     */\n    get sizeOfAllShortenedItemsExcludingLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(0, this.breadcrumbs.length-1), false);\n    }\n    /**\n     * a getter that returns the size of the full last item\n     */\n    get sizeOfFullLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1));\n    }\n    /**\n     * a getter that returns the size of the short last item\n     */\n    get sizeOfShortLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1), false);\n    }\n    /**\n     * a getter that returns the last item in the breadcrumb array.\n     */\n    get lastItemFull() {\n      return this.breadcrumbs.slice(-1)[0];\n    }\n    /**\n     * a getter that returns the short version of the last item in the breadcrumbs array.\n     */\n    get lastItemShort() {\n      return this.shortenedItems.slice(-1)[0];\n    }\n    /**\n     * a getter that returns an array of all the shortened items in the breadcrumbs array \n     */\n    get shortenedItems() {\n      this.__shortenedItems = this.__shortenedItems ||  this.breadcrumbs.map((item) => {\n        var wrapper = {};\n        wrapper.source = item;\n        wrapper.isTruncated = true;\n        wrapper.text = this._getShortenedText(item);\n        wrapper.children = item.children;\n        wrapper.selectedItem = item.selectedItem;\n        wrapper.hasChildren = item.hasChildren;\n        return wrapper;\n      });\n      return this.__shortenedItems;\n    }\n    /**\n     * a getter that returns the size - in pixels - of the overflow ellipsis\n     */\n    get sizeOfEllipsis() {\n      return parseInt(this.ctx.measureText('...').width,10)\n    }\n    /**\n     * a getter that returns the size - in pixels - of all the shortened breadcrumbs items\n     */\n    get sizeOfAllShortenedItems() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs, false);\n    }\n    /**\n     * a getter that returns the size - in pixels - of all the shortened breadcrumbs items excluding the last item\n     */\n    get allShortenedItemsExcludingLast() {\n      return this.shortenedItems.slice(0, this.shortenedItems.length -1);\n    }\n    /**\n     * This method adds the item that is passed in to the weakMap if it is not already there.\n     * @param {Object} item an item from the breadcrumbs array that is being added to the weakMap\n     */\n    _addToWeakMap(item) {\n      const cachedItem = this.map.get(item) || null;\n      if (!cachedItem) {\n        this.map.set(item, item);  \n      }\n    }\n    /**\n     * This method is called when the class is instantiated. it loops through all the passed in items, and calls the _getShortenedText method on \n     * each item.\n     * @param {Array} items an array of breadcrumbs items \n     */\n    _preShortenItems(items) {\n      for (let item of items) {\n        this._getShortenedText(item);\n      }\n    }\n    /**\n     * This method returns the shortened version of the text in the item that is passed in, as well as add it into the map.\n     * it checks for a cached version before it sets it.\n     * @param {Object} item a breadcrumb Item\n     */\n    _getShortenedText(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortText = cachedItem.shortText || `${item.text.substr(0,6)}...${item.text.substr(item.text.length-6)}`;\n      this.map.set(item, cachedItem);\n      return cachedItem.shortText;\n    }\n    /**\n     * \n     * This method returns the size - in pixels - of the full size of the text in the passed in item, as well as add that info into the map.\n     * it checks for a cached version before setting this value\n     * @param {Object} item a breadcrumb Item\n     */\n    _sizeOfIndividualFullItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.fullSize = (cachedItem.fullSize || parseInt(this.ctx.measureText(item.text).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.fullSize;\n    }\n    /**\n     * \n     * This method returns the size - in pixels - of the short size of the text in the passed in item, as well as add that info into the map.\n     * it checks for a cached version before setting this value\n     * @param {Object} item a breadcrumb Item\n     */\n    sizeOfIndividualShortItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortSize = (cachedItem.shortSize || parseInt(this.ctx.measureText(cachedItem.shortText).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.shortSize;\n    }\n    /**\n     * \n     * This method loops through the passed in array, and gets the size - in pixels - of all the items\n     * the size can be determined in either short or full text.\n     * it takes into account the size of the iron icons, as well as padding on each item, and padding on the container.\n     * \n     * @param {Array} strArray an array of the items we need the size calculated on.\n     * @param {Boolean} useFullSize this determines whether the full size is measured, or the short size.\n     */\n    _calculateSizeOfBreadcrumbs(strArray, useFullSize=true) {\n      if (strArray) {\n        let accum = 0,\n            i = 0,\n            len = strArray.length,\n            sizeOfItem;\n\n        for (i=0; i<len;i++,sizeOfItem=null) {\n          \n          if (useFullSize) {\n            sizeOfItem = this._sizeOfIndividualFullItem(strArray[i]);\n          } else {\n            sizeOfItem = this.sizeOfIndividualShortItem(strArray[i]);\n          }\n          var source = strArray[i].source ? strArray[i].source : strArray[i];\n          accum += sizeOfItem;\n          //if the item has siblings, we need to add the size of the down chevron.\n          if (strArray[i].text !== \"...\" && this.graph.hasSiblings(source)) {\n            accum += 15;\n          }\n          //padding on each item (10 on each side)\n          accum += 20;\n\n          //right angle arrow - the last item doesn't get a right angle.\n          if (i !== len-1){\n            accum += 15; \n          }\n        }\n        \n        return accum + 80;\n      }\n    }\n    /**\n     * This method creates/returns the canvas that we will use to measure the size of the text.\n     * we also set the font and font size.\n     */\n    _createCanvas() {\n      const canvas = document.createElement('canvas');\n      \n      canvas.height = 20;\n      canvas.width = 9999;\n\n      const ctx = canvas.getContext('2d');\n      ctx.font = \"15px GE Inspira Sans\";\n      return ctx;\n    }\n  };\n  \n  class Graph {\n    constructor(nodes) {\n      this.map = new WeakMap();\n      this._selectedItem = null;\n      this.graph = this._crawlGraph(nodes);\n      this.nodes = nodes;\n      return this;\n    }\n    /**\n     * This method is called when the class is instantiated. it loops through the nodes recursively, and add the metaData to each item\n     * as well as adds the node into the weakMap.\n     * \n     * @param {Array} nodes an array of breadcrumbs nodes\n     */\n    _crawlGraph(nodes) {\n      var recursiveLoopThroughObj = function(nodes, parent, path=[]) {\n          for (var i=0, len = nodes.length; i<len;i++) {\n          var metaData = {},\n            itemPath;\n\n            if (parent) {\n              metaData.parent = parent;\n            }\n            \n            if (nodes.length >1) {\n              metaData.siblings = nodes;\n            }\n                        \n            itemPath = path.concat([nodes[i]]);\n            \n            if (nodes[i].children) {\n              metaData.children = nodes[i].children;\n              //if it has children, we want to keep digging in\n              //and call ourselves with the children of the current item\n              recursiveLoopThroughObj.call(this,nodes[i].children, nodes[i], itemPath);\n            }\n\n            metaData.path = itemPath;\n            \n            if (nodes[i].selectedItem) {\n              this._selectedItem = nodes[i];\n\n              //add the parent and the selected item itself to the path\n              //metaData.path = path.concat(parent);\n            }\n            this.map.set(nodes[i], metaData);\n          }\n\n        }.bind(this);\n\n        //the initial call into the recursion\n        recursiveLoopThroughObj(nodes);\n    }\n    /**\n     * This getter returns the selectedItem\n     */\n    get selectedItem() {\n      return this._selectedItem;\n    }\n    /** \n     * this getter returns the selected Item's path.\n     */\n    get selectedItemPath() {\n      var metaData = this.map.get(this._selectedItem);\n      return (metaData) ? metaData.path : undefined;\n    }\n    /**\n     * This method is called when a new item is selected - it \n     * changes the selected Item on the graph, and returns the new selected item path.\n     * @param {Object} item the newly selected item\n     */\n    handleSelectedItem(item) {\n      this.selectedItem = item;\n      return this.selectedItemPath;\n    }\n    /**\n     * This method returns the path specified on an item.\n     * @param {Object} item \n     */\n    getPathToItem(item) {\n      var metaData = this.map.get(item);\n      return metaData.path;\n    }\n    /**\n     * This method returns whether or not the passed in item as any siblings.\n     * @param {Object} item \n     */\n    hasSiblings(item) {\n      var siblings = this.map.get(item).siblings;\n      return siblings && siblings.length >1;\n    }\n    /**\n     * This method returns the passed in item's siblings.\n     * @param {Object} item \n     */\n    getSiblings(item) {\n      var siblings = this.map.get(item).siblings;\n      return siblings;\n    }\n    /**\n     * This setter sets the selected Item on the Graph Map, as well as the selectedItem Property on the item itself.\n     */\n    set selectedItem(item) {\n      if (item) {\n        this._selectedItem.selectedItem = false;\n        item.selectedItem = true;\n        this._selectedItem = item;\n      }\n    }\n  }\n})();\n"]}