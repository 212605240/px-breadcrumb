{"version":3,"sources":["px-breadcrumbs.es6.js"],"names":["Polymer","is","properties","breadcrumbData","type","Array","value","_mainPathItems","_clickPathItem","Object","_clickedItemChildren","_isDropdownHidden","Boolean","_selectedItem","ulWidth","Number","behaviors","IronResizableBehavior","listeners","observers","prepareData","_calculatePath","then","pathArray","_breadcrumbsDisplayOptions","set","_getContainerSize","debounce","window","requestAnimationFrame","breadcrumbsContainer","dom","root","querySelector","breadcrumbsUlContainer","bcUlContainerRect","getBoundingClientRect","width","RenderStatus","afterNextRender","strArray","Promise","accept","reject","breadcrumbsObj","Breadcrumbs","sizeOfFullBreadcrumbs","sizeOfAllShortenedItemsExcludingLastItem","sizeOfFullLastItem","strArrayShortenedWithFullLastItem","allShortenedItemsExcludingLast","concat","lastItemFull","sizeOfAllShortenedItems","strArrayShortened","shortenedItems","_createArrayWithOverflow","pointer","currentAccumSize","sizeOfEllipsis","noRoomForFullLastItem","lastItem","overflowObj","slicedStrArray","length","removedSize","sizeOfIndividualShortItem","children","slice","lastItemShort","_normalizePathClickTarget","evt","target","_iconsetName","parentNode","_resetSelectedItem","graph","Graph","selectedItemPath","_addParentPropToItem","parent","i","len","newItem","text","hasChildren","selectedItem","_addToWeakMap","_doesItemHaveSiblings","itemInPath","hasSibling","hasSiblings","_doesItemHaveChildrenAndIsNotFirst","index","_isLastItemInData","_dropdownTap","newSelectItem","model","item","_setSelectedItem","_changePathFromDropdownClick","_foundSelectedItem","detail","_onPathTap","dataItem","stopPropagation","_changeDropdownPosition","sourceItem","hasOwnProperty","source","siblings","getSiblings","normalizedTarget","targetRect","targetLeft","left","targetBottom","bottom","targetHeight","height","windowScrollX","scrollX","windowScrollY","scrollY","dropdown","style","top","_notifyClick","fire","composed","breadcrumbs","map","WeakMap","ctx","_createCanvas","_preShortenItems","push","cachedItem","get","items","_getShortenedText","shortText","substr","fullSize","parseInt","measureText","shortSize","useFullSize","accum","sizeOfItem","_sizeOfIndividualFullItem","canvas","document","createElement","getContext","font","__sizeOfFullBreadcrumbs","_calculateSizeOfBreadcrumbs","__shortenedItems","wrapper","isTruncated","nodes","pxBreacdcrumbs","_crawlGraph","recursiveLoopThroughObj","path","metaData","call","bind","filter","sibling","undefined"],"mappings":"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","file":"px-breadcrumbs.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-breadcrumbs', \n\n    properties: {\n      /**\n       * This array receives/holds the data that will be transformed into the breadcrumbs.\n       */\n      breadcrumbData: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _mainPathItems: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _clickPathItem: {\n        type: Object,\n        value: function() {return {};}\n      },\n      _clickedItemChildren: {\n        type: Array,\n        value: function() {return [];},\n        \n      },\n      _isDropdownHidden: {\n        type: Boolean,\n        value: true\n      },\n      _selectedItem: {\n        type: Object\n      },\n      ulWidth: {\n        type: Number,\n        value: 0\n      }\n    },\n    behaviors: [Polymer.IronResizableBehavior],\n    listeners: {\n      'iron-resize': '_getContainerSize',\n      'px-breadcrumbs-item-selected': '_foundSelectedItem'},\n    observers: ['prepareData(_selectedItem)'],\n    /**\n     * This method has a chain of promises that process the data as needed.\n     * first, we extract the path out of the data that's passed in\n     * then we figure out the display options - whether we need overflow, shorten any names, etc.\n     * lastly, we set the _mainPathItems,  with the shortened/overflow version as needed\n     */\n    prepareData() {\n      this._calculatePath()\n      .then((pathArray) => {\n        return this._breadcrumbsDisplayOptions(pathArray)})\n      .then((pathArray) => {\n        //and the second time this is being set, it's with the shortened versions, if necessary. \n        this.set('_mainPathItems', pathArray);\n      });\n    },\n    /**\n     * This method is called on initial page load, and on every page resize\n     * to find the width of the container after a draw, and queues\n     * the display options for the breadcrumbs for the next animation frame\n     * \n     */\n    _getContainerSize() {\n      this.debounce('windowResize', () => {\n        window.requestAnimationFrame(() => {\n          var breadcrumbsContainer = Polymer.dom(this.root).querySelector('.container'),\n              breadcrumbsUlContainer = Polymer.dom(breadcrumbsContainer).querySelector('ul'),\n              bcUlContainerRect = breadcrumbsContainer.getBoundingClientRect();\n\n          this.set('ulWidth', bcUlContainerRect.width + 4); //the 4 is for the padding (2px on each side) on the ul.\n        });\n\n        Polymer.RenderStatus.afterNextRender(this, () =>{\n          this.prepareData();\n        });\n      },10);\n      \n    },\n    /* \n    * in this method, we decide on the display options for the breadcrumbs. \n    * we have the following options:\n    * 1. nothing needs to be shortened.\n    * 2. we can shorten all but the last one\n    * 2. we can shorten all including the last one\n    * 3. we can shorten all of them, and include the overflow at the beginning of the array. the last one is NOT shortened.\n    * @param {array} strArray an array of objects, which contains the breadcrumbs\n    */\n    _breadcrumbsDisplayOptions(strArray) {\n      return new Promise((accept, reject) => {\n        var breadcrumbsObj = new Breadcrumbs(strArray),\n            ulWidth = this.ulWidth;\n        /*\n        * option 1 \n        * we check to see if the container (which is sized automatically to fill out the page)\n        * can fit all the items in the breadcrumbs.\n        * the first option is the simpliest one - everything just fits, but if it doesn't fit...\n        */\n        if (ulWidth > breadcrumbsObj.sizeOfFullBreadcrumbs) {\n          //everything fits, no need to shorten anything\n          return accept(strArray);\n        }\n\n        /*\n        * option 2\n        * we want to find out if the container can now fit all the \n        * shortened items + the last Item that wasn't shortened\n        */\n        if (ulWidth > breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem + breadcrumbsObj.sizeOfFullLastItem) {\n          let strArrayShortenedWithFullLastItem = breadcrumbsObj.allShortenedItemsExcludingLast.concat(breadcrumbsObj.lastItemFull);\n          return accept(strArrayShortenedWithFullLastItem);\n        }\n\n        /*\n        * option 3 \n        * we check if we can fit after we've shortened all the items \n        */\n        if (ulWidth > breadcrumbsObj.sizeOfAllShortenedItems) {\n          let strArrayShortened = breadcrumbsObj.shortenedItems;\n          \n          return accept(strArrayShortened);\n        }\n\n        /*\n        * option 4\n        * we have to create an array with overflow.\n        * we only get to this if non of the if statements above are true.\n        */\n        \n        return accept(this._createArrayWithOverflow(strArray, ulWidth, breadcrumbsObj));\n      });\n    },\n    /*\n    * this method is called once we've established that we need to have an\n    * array with overflow.\n    * we keep removing the size of items - starting from the beginning of the array - \n    *  from the total size of all the items, until we can fit everything + the last item that isn't shortened\n    * into the container.\n    * @param {Array} strArray the array that holds the breadcrumbs\n    * @param {number} ulWidth the width of the ul container\n    */\n    _createArrayWithOverflow(strArray, ulWidth, breadcrumbsObj) {\n      return new Promise((accept, reject) => {\n      var pointer = 0,\n          currentAccumSize = breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem,\n          sizeOfFullLastItem = breadcrumbsObj.sizeOfFullLastItem,\n          sizeOfEllipsis = breadcrumbsObj.sizeOfEllipsis,\n          noRoomForFullLastItem = false,\n          lastItem = {},\n          overflowObj = {\"text\": \"...\", \"hasChildren\": true},\n          slicedStrArray = [];\n\n      //keep looping until all the items fit into the container\n      while (ulWidth < sizeOfEllipsis + currentAccumSize + sizeOfFullLastItem) {\n        //if we made it to the last item, and it's STILL can't fit, break out of the \n        // while loop, to ensure the last items doesn't go into the overflow object.\n        if (pointer === strArray.length-1) {\n          noRoomForFullLastItem = true;\n          break\n        }\n        //get the size of the item we are placing into the overflow\n        var removedSize = breadcrumbsObj.sizeOfIndividualShortItem(strArray[pointer]);\n        // subtract the size from the overall accumulated size\n        currentAccumSize -= removedSize;\n        //and make sure to manually change our pointer.\n        pointer++;\n      }\n      \n      \n\n      //create the overflow object, and populate its children with the shortened strings (if necessary)\n      overflowObj.children = breadcrumbsObj.shortenedItems.slice(0, pointer);\n\n      //the last item is usually full size, but, if if it's just the overflow and the last item\n      // and the last item is too long, it should shortened.\n      lastItem  = (noRoomForFullLastItem) ? breadcrumbsObj.lastItemShort : breadcrumbsObj.lastItemFull;\n      \n      //add the overflow obj to the beginning of the array, and follow it up with all the shortened strings, \n      //starting with the point we stopped at with the pointer, and going till the last item, which is dynamically determined.\n      slicedStrArray = [overflowObj].concat(breadcrumbsObj.shortenedItems.slice(pointer, strArray.length-1)).concat(lastItem);\n      \n      return accept(slicedStrArray);\n      });\n    },\n    \n\n    /**\n     * This method is used to determine where the path click came from - we have 3 different options, \n     * 1. the text\n     * 2. the down chevron\n     * 3. The side chevron\n     * but we really want the encompossing LI, regardless of what was clicked. \n     * the two icons have a _iconsetName property that is 'fa' so we use that to determine if they were clicked, \n     * and if so, grab their parent, which is the LI.\n     * @param {*} evt the event generated by the user tap\n     */\n    _normalizePathClickTarget(evt) {\n      return (evt.target._iconsetName === 'fa') ? evt.target.parentNode.parentNode : evt.target;\n    },\n    /**\n     * This method resets the existing _selectedItem\n     */\n    _resetSelectedItem() {\n      this.set('_selectedItem', false);\n    },\n    /**\n     * This method is called on load, to calculate the initial Path, \n     * everytime a breadcrumb is clicked.\n     * it recursively builds the path, and returns it as a promise.\n     */\n    _calculatePath() {\n      return new Promise((accept, reject) => {\n        var graph = this.graph || new Graph(this.breadcrumbData, this),\n            pathArray = graph.selectedItemPath;\n        \n        this.set('graph', graph);\n        \n        //once all the recursion is done, we can return the pathArray\n        return accept(pathArray);\n      });\n    },\n    _addParentPropToItem(parent) {\n      var i=0,\n          children = parent.children,\n          len = children.length,\n          breadcrumbsObj = this.breadcrumbsObj;\n\n      for (; i<len;i++) {\n        var newItem = {};\n        newItem.children = children[i].children;\n        newItem.text = children[i].text;\n        newItem.hasChildren = children[i].hasChildren;\n        newItem.selectedItem = children[i].selectedItem;\n        newItem.parent = parent;\n\n        breadcrumbsObj._addToWeakMap = newItem;\n      }\n    },\n    /**\n     * This function checks whether the item in question has children.\n     * @param {*} itemInPath \n     */\n    _doesItemHaveSiblings(itemInPath) {\n      var graph = this.graph,\n          hasSibling = graph.hasSiblings(itemInPath);\n      //we check that the item exists, has chil\n      return hasSibling;\n    },\n     /**\n     * This function checks whether the item in question has children, and is not the first item in the array - used by the dom-repeat\n     * to determine whether the angle down should show up - the ... does not need it, and is always first.\n     * @param {Object} itemInPath the item we are checking against\n     * @param {Number} index the index of the item in the array\n     */\n    _doesItemHaveChildrenAndIsNotFirst(itemInPath, index) {\n      //we check that the item exists, has chil\n      return (itemInPath && itemInPath.hasChildren && index !==0);\n    },\n    /**\n     * This function is used to determine whether we are on the last Item in the array. - if \n     * the index equalsthe last item in the aray (length -1), we return false.\n     * @param {Number} index the index of the item\n     */\n    _isLastItemInData(index) {\n      return this._mainPathItems.length-1 === index;\n    },\n    /**\n     * this method calls a reset on whatever selected Item we \n     * previously had, and calls a set on the new selectedItem, as well as calls prepareData which determines \n     * how the breadcrumbs will show up.\n     * @param {Object} evt the click event from the dropdown item clicked\n     */\n    _dropdownTap(evt) {\n      this._resetSelectedItem();\n      var newSelectItem = evt.model.item;\n      this._setSelectedItem(newSelectItem);\n      //this hides the dropdown\n      this.set('_isDropdownHidden', true);\n      this._changePathFromDropdownClick();\n      //and this clears out the field that hold the previously clicked\n      //path item.\n      this.set('_clickPathItem', {});\n      \n    },\n    /**\n     * This method calls the prepareData method, which runs through the \n     */\n    _changePathFromDropdownClick() {\n      this.prepareData();\n    },\n    _foundSelectedItem(evt) {\n      this._setSelectedItem(evt.detail.item);\n    },\n    /**\n     * This method sets a _selectedItem from the passed object.\n     * @param {Object} selectedItem the new selected item\n     */\n    _setSelectedItem(selectedItem) {\n      \n      selectedItem.selectedItem = true;\n      this.set('_selectedItem', selectedItem);\n    },\n    /* on tap, we need to find out if the clicked item is the same as before.\n    * if it is, we make the dropdown go way.\n    * if it is not, we save the new clicked item.\n    */\n    _onPathTap(evt) {\n      var dataItem = evt.model.item;\n\n      // if the selected item (the one at the end of the breadcrumb) has been clicked, ignore it.\n      if (evt.model.item.selectedItem) {\n        evt.stopPropagation();\n        return;\n      }\n      //if the item that is clicked is the open option, hide the dropdown, and reset the _clickPathItem object.\n      if (this._clickPathItem === dataItem) {\n        this.set('_isDropdownHidden', true);\n        this.set('_clickPathItem', {});\n      } else {\n        //new click on new item, set the clicked item, show the dropdown and set its position.\n        this.set('_clickPathItem', dataItem);\n        this.set('_isDropdownHidden', false);\n        this._changeDropdownPosition(evt);\n      }\n\n      var sourceItem = dataItem.hasOwnProperty('source') ? dataItem.source : dataItem;\n\n      if (this._doesItemHaveSiblings(sourceItem)) {\n        var graph = this.graph,\n            siblings = graph.getSiblings(sourceItem);\n        this.set('_clickedItemChildren', siblings);\n      }\n    },\n    /**\n     * @param {Object} positioning an object which holds the new positioning for the dropdown\n     */\n    _changeDropdownPosition(evt) {\n      var normalizedTarget = this._normalizePathClickTarget(evt),\n          targetRect = normalizedTarget.getBoundingClientRect(),\n          targetLeft = targetRect.left,\n          targetBottom = targetRect.bottom,\n          targetHeight = targetRect.height,\n          windowScrollX = window.scrollX,\n          windowScrollY = window.scrollY,\n          dropdown = Polymer.dom(this.root).querySelector('.breadCrumbdropdown');\n      \n      dropdown.style.top = (targetBottom + windowScrollY + 4) + 'px';\n      dropdown.style.left = targetLeft + windowScrollX + 'px';\n    },\n    /**\n     * This method dispatches a custom event ('px-breadcrumbs-item-clicked') that has the item attached to it.\n     * the 'composed: true' property makes it so the event passes through shadow dom boundaries.\n     * @param {*} item the item that was clicked on.\n     */\n    _notifyClick(item) {\n      this.fire('px-breadcrumbs-item-clicked', {item: item, composed: true});\n    }\n  });\n  \n  class Breadcrumbs {\n    constructor(breadcrumbs = []) {\n      this.breadcrumbs = breadcrumbs;\n      this.map = new WeakMap();\n      this.ctx = this._createCanvas();\n      this._preShortenItems(this.breadcrumbs);\n      return this;\n    }\n    \n    get sizeOfFullBreadcrumbs() {\n      this.__sizeOfFullBreadcrumbs = this.__sizeOfFullBreadcrumbs || this._calculateSizeOfBreadcrumbs(this.breadcrumbs);\n      return this.__sizeOfFullBreadcrumbs;\n    }\n    get sizeOfAllShortenedItemsExcludingLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(0, this.breadcrumbs.length-1), false);\n    }\n    get sizeOfFullLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1));\n    }\n    get sizeOfShortLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1), false);\n    }\n    get lastItemFull() {\n      return this.breadcrumbs.slice(-1)[0];\n    }\n    get lastItemShort() {\n      return this.shortenedItems.slice(-1)[0];\n    }\n    get shortenedItems() {\n      this.__shortenedItems = this.__shortenedItems ||  this.breadcrumbs.map((item) => {\n        var wrapper = {};\n        wrapper.source = item;\n        wrapper.isTruncated = true;\n        wrapper.text = this._getShortenedText(item);\n        wrapper.children = item.children;\n        wrapper.selectedItem = item.selectedItem;\n        wrapper.hasChildren = item.hasChildren;\n        return wrapper;\n      });\n      return this.__shortenedItems;\n    }\n    get sizeOfEllipsis() {\n      return parseInt(this.ctx.measureText('...').width,10)\n    }\n    get sizeOfAllShortenedItems() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs, false);\n    }\n    get allShortenedItemsExcludingLast() {\n      return this.shortenedItems.slice(0, this.shortenedItems.length -1);\n    }\n    get sizeOfAllShortenedItems() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs, false);\n    }\n\n    _addItemToBreadcrumbsClassAndWeakMap(item) {\n      this.breadcrumbs.push(item);\n      this._addToWeakMap(item);\n    }\n    _addToWeakMap(item) {\n      const cachedItem = this.map.get(item) || null;\n      if (!cachedItem) {\n        this.map.set(item, item);  \n      }\n    }\n    _preShortenItems(items) {\n      for (let item of items) {\n        this._getShortenedText(item);\n      }\n    }\n    _getShortenedText(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortText = cachedItem.shortText || `${item.text.substr(0,6)}...${item.text.substr(item.text.length-6)}`;\n      this.map.set(item, cachedItem);\n      return cachedItem.shortText;\n    }\n    _sizeOfIndividualFullItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.fullSize = (cachedItem.fullSize || parseInt(this.ctx.measureText(item.text).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.fullSize;\n    }\n    sizeOfIndividualShortItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortSize = (cachedItem.shortSize || parseInt(this.ctx.measureText(cachedItem.shortText).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.shortSize;\n    }\n    _calculateSizeOfBreadcrumbs(strArray, useFullSize=true) {\n      if (strArray) {\n        let accum = 0,\n            i = 0,\n            len = strArray.length,\n            sizeOfItem;\n\n        for (i=0; i<len;i++,sizeOfItem=null) {\n          \n          if (useFullSize) {\n            sizeOfItem = this._sizeOfIndividualFullItem(strArray[i]);\n          } else {\n            sizeOfItem = this.sizeOfIndividualShortItem(strArray[i]);\n          }\n\n          accum += sizeOfItem + 15; //the 15 is for the right angle.\n          \n          //if the item has children, we need to add the size of the down chevron.\n          if (strArray[i].children) {\n            accum += 11;\n          }\n        }\n        return accum;\n      }\n    }\n    _createCanvas() {\n      const canvas = document.createElement('canvas');\n      \n      canvas.height = 20;\n      canvas.width = 9999;\n\n      const ctx = canvas.getContext('2d');\n      ctx.font = \"15px GE Inspira Sans\";\n      return ctx;\n    }\n  };\n  \n  class Graph {\n    constructor(nodes, pxBreacdcrumbs) {\n      this.map = new WeakMap();\n      this._selectedItem = null;\n      this.graph = this._crawlGraph(nodes, pxBreacdcrumbs);\n      this.nodes = nodes;\n      return this;\n    }\n    _crawlGraph(nodes,pxBreacdcrumbs) {\n      \n      var recursiveLoopThroughObj = function(nodes, parent, path=[]) {\n        var metaData = {};\n\n          for (var i=0, len = nodes.length; i<len;i++) {\n\n            if (parent) {\n              metaData.parent = parent;\n            }\n\n            \n            if (nodes[i].children) {\n              //if it has children, we want to keep digging in\n              //so we push the item we are on into the pathArray\n              //and call ourselves with the children of the current item\n              metaData.children = nodes[i].children;\n              path = path.concat(parent ? [parent] : [])\n\n              recursiveLoopThroughObj.call(this,nodes[i].children, nodes[i], path);\n            }\n\n            metaData.path = path.concat(parent ? [parent] : []);\n            \n            if (nodes[i].selectedItem) {\n              this._selectedItem = nodes[i];\n\n              //add the parent and the selected item itself to the path\n              metaData.path = path.concat(parent, nodes[i]);\n              \n              pxBreacdcrumbs.fire('px-breadcrumbs-item-selected', {item: nodes[i]});\n            }\n            this.map.set(nodes[i], metaData);\n          }\n\n        }.bind(this);\n\n        //the initial call into the recursion\n        recursiveLoopThroughObj(nodes);\n    }\n    get selectedItem() {\n      return this._selectedItem;\n    }\n    get selectedItemPath() {\n      \n      var metaData = this.map.get(this._selectedItem);\n      \n      return (metaData) ? metaData.path : undefined;\n    }\n    hasSiblings(item) {\n      debugger;\n      var parent = this.map.get(item).parent;\n      return (parent.children) ? true : false;\n    }\n    getSiblings(item) {\n      var parent = this.map.get(item).parent;\n      return parent.children.filter((sibling) => {\n        return sibling !== item;\n      });\n    }\n    set selectedItem(item) {\n      debugger;\n      if (item) {\n        this._selectedItem.selectedItem = false;\n      item.selectedItem = true;\n      this._selectedItem = item;\n      }\n    }\n  }\n})();\n"]}