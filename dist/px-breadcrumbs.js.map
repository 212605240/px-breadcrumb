{"version":3,"sources":["px-breadcrumbs.es6.js"],"names":["Polymer","is","properties","breadcrumbData","type","Array","value","_mainPathItems","_clickPathItem","Object","_clickedItemChildren","_isDropdownHidden","Boolean","_selectedItem","ulWidth","Number","behaviors","IronResizableBehavior","listeners","attached","prepareData","_calculatePath","then","pathArray","_breadcrumbsDisplayOptions","set","_getContainerSize","debounce","window","requestAnimationFrame","breadcrumbsContainer","dom","root","querySelector","breadcrumbsUlContainer","bcUlContainerRect","getBoundingClientRect","width","RenderStatus","afterNextRender","strArray","Promise","accept","reject","graph","breadcrumbsObj","Breadcrumbs","sizeOfFullBreadcrumbs","sizeOfAllShortenedItemsExcludingLastItem","sizeOfFullLastItem","strArrayShortenedWithFullLastItem","allShortenedItemsExcludingLast","concat","lastItemFull","sizeOfAllShortenedItems","strArrayShortened","shortenedItems","_createArrayWithOverflow","pointer","currentAccumSize","sizeOfEllipsis","noRoomForFullLastItem","lastItem","overflowObj","slicedStrArray","length","removedSize","sizeOfIndividualShortItem","children","slice","lastItemShort","_normalizePathClickTarget","evt","target","_iconsetName","parentNode","_resetSelectedItem","Graph","selectedItemPath","_addParentPropToItem","parent","i","len","newItem","text","hasChildren","selectedItem","_addToWeakMap","_doesItemHaveSiblings","itemInPath","source","isItemOverflow","hasSiblings","_isLastItemInData","index","_dropdownTap","newSelectItem","model","item","_changePathFromClick","mainPathItems","getPathToItem","_foundSelectedItem","_setSelectedItem","detail","_handleSelectedItem","_onPathTap","dataItem","sourceItem","hasOwnProperty","isClickedItemOverflow","siblings","getSiblings","_changeDropdownPosition","normalizedTarget","targetRect","targetLeft","left","targetBottom","bottom","targetHeight","height","windowScrollX","scrollX","windowScrollY","scrollY","dropdown","style","top","_notifyClick","fire","composed","breadcrumbs","map","WeakMap","ctx","_createCanvas","_preShortenItems","cachedItem","get","items","_getShortenedText","shortText","substr","fullSize","parseInt","measureText","shortSize","useFullSize","accum","sizeOfItem","_sizeOfIndividualFullItem","console","log","canvas","document","createElement","getContext","font","__sizeOfFullBreadcrumbs","_calculateSizeOfBreadcrumbs","__shortenedItems","wrapper","isTruncated","nodes","_crawlGraph","recursiveLoopThroughObj","path","metaData","itemPath","call","bind","undefined"],"mappings":"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","file":"px-breadcrumbs.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-breadcrumbs', \n\n    properties: {\n      /**\n       * This array receives/holds the data that will be transformed into the breadcrumbs.\n       */\n      breadcrumbData: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _mainPathItems: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _clickPathItem: {\n        type: Object,\n        value: function() {return {};}\n      },\n      _clickedItemChildren: {\n        type: Array,\n        value: function() {return [];},\n        \n      },\n      _isDropdownHidden: {\n        type: Boolean,\n        value: true\n      },\n      _selectedItem: {\n        type: Object\n      },\n      ulWidth: {\n        type: Number,\n        value: 0\n      }\n    },\n    behaviors: [Polymer.IronResizableBehavior],\n    listeners: {\n      'iron-resize': '_getContainerSize'\n    },\n    attached() {\n      this.prepareData();\n    },\n    /**\n     * This method has a chain of promises that process the data as needed.\n     * first, we extract the path out of the data that's passed in\n     * then we figure out the display options - whether we need overflow, shorten any names, etc.\n     * lastly, we set the _mainPathItems,  with the shortened/overflow version as needed\n     */\n    prepareData() {\n      this._calculatePath()\n      .then((pathArray) => {\n        return this._breadcrumbsDisplayOptions(pathArray)})\n      .then((pathArray) => {\n        //and the second time this is being set, it's with the shortened versions, if necessary. \n        this.set('_mainPathItems', pathArray);\n      });\n    },\n    /**\n     * This method is called on initial page load, and on every page resize\n     * to find the width of the container after a draw, and queues\n     * the display options for the breadcrumbs for the next animation frame\n     * \n     */\n    _getContainerSize() {\n      this.debounce('windowResize', () => {\n        window.requestAnimationFrame(() => {\n          var breadcrumbsContainer = Polymer.dom(this.root).querySelector('.container'),\n              breadcrumbsUlContainer = Polymer.dom(breadcrumbsContainer).querySelector('ul'),\n              bcUlContainerRect = breadcrumbsContainer.getBoundingClientRect();\n\n          this.set('ulWidth', bcUlContainerRect.width + 4); //the 4 is for the padding (2px on each side) on the ul.\n        });\n\n        Polymer.RenderStatus.afterNextRender(this, () =>{\n            this.prepareData();\n        });\n      },10);\n      \n    },\n    /* \n    * in this method, we decide on the display options for the breadcrumbs. \n    * we have the following options:\n    * 1. nothing needs to be shortened.\n    * 2. we can shorten all but the last one\n    * 2. we can shorten all including the last one\n    * 3. we can shorten all of them, and include the overflow at the beginning of the array. the last one is NOT shortened.\n    * @param {array} strArray an array of objects, which contains the breadcrumbs\n    */\n    _breadcrumbsDisplayOptions(strArray) {\n      return new Promise((accept, reject) => {\n        var graph = this.graph,\n            breadcrumbsObj = new Breadcrumbs(strArray, graph),\n            ulWidth = this.ulWidth;\n        //check that we even have a width. If not, just return 0 - it'll run again.\n        if (ulWidth > 0) {\n          /*\n        * option 1 \n        * we check to see if the container (which is sized automatically to fill out the page)\n        * can fit all the items in the breadcrumbs.\n        * the first option is the simpliest one - everything just fits, but if it doesn't fit...\n        */\n        if (ulWidth > breadcrumbsObj.sizeOfFullBreadcrumbs) {\n          //everything fits, no need to shorten anything\n          return accept(strArray);\n        }\n\n        /*\n        * option 2\n        * we want to find out if the container can now fit all the \n        * shortened items + the last Item that wasn't shortened\n        */\n        if (ulWidth > breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem + breadcrumbsObj.sizeOfFullLastItem) {\n          \n          let strArrayShortenedWithFullLastItem = breadcrumbsObj.allShortenedItemsExcludingLast.concat(breadcrumbsObj.lastItemFull);\n          return accept(strArrayShortenedWithFullLastItem);\n        }\n\n        /*\n        * option 3 \n        * we check if we can fit after we've shortened all the items \n        */\n        if (ulWidth > breadcrumbsObj.sizeOfAllShortenedItems) {\n          let strArrayShortened = breadcrumbsObj.shortenedItems;\n          \n          return accept(strArrayShortened);\n        }\n\n        /*\n        * option 4\n        * we have to create an array with overflow.\n        * we only get to this if non of the if statements above are true.\n        */\n        \n        return accept(this._createArrayWithOverflow(strArray, ulWidth, breadcrumbsObj));\n      } else {\n        //we're at width 0, just return 0;\n        return accept(0);\n      }\n      });\n    },\n    /*\n    * this method is called once we've established that we need to have an\n    * array with overflow.\n    * we keep removing the size of items - starting from the beginning of the array - \n    *  from the total size of all the items, until we can fit everything + the last item that isn't shortened\n    * into the container.\n    * @param {Array} strArray the array that holds the breadcrumbs\n    * @param {number} ulWidth the width of the ul container\n    */\n    _createArrayWithOverflow(strArray, ulWidth, breadcrumbsObj) {\n      \n      return new Promise((accept, reject) => {\n      var pointer = 0,\n          currentAccumSize = breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem,\n          sizeOfFullLastItem = breadcrumbsObj.sizeOfFullLastItem,\n          sizeOfEllipsis = breadcrumbsObj.sizeOfEllipsis,\n          noRoomForFullLastItem = false,\n          lastItem = {},\n          overflowObj = {\"text\": \"...\", \"hasChildren\": true},\n          slicedStrArray = [];\n\n      //keep looping until all the items fit into the container\n      while (ulWidth < sizeOfEllipsis + currentAccumSize + sizeOfFullLastItem) {\n        //if we made it to the last item, and it's STILL can't fit, break out of the \n        // while loop, to ensure the last items doesn't go into the overflow object.\n        if (pointer === strArray.length-1) {\n          noRoomForFullLastItem = true;\n          break\n        }\n        //get the size of the item we are placing into the overflow\n        var removedSize = breadcrumbsObj.sizeOfIndividualShortItem(strArray[pointer]);\n        // subtract the size from the overall accumulated size\n        currentAccumSize -= removedSize;\n        //and make sure to manually change our pointer.\n        pointer++;\n      }\n      \n      \n\n      //create the overflow object, and populate its children with the shortened strings (if necessary)\n      overflowObj.children = strArray.slice(0, pointer);\n\n      //the last item is usually full size, but, if if it's just the overflow and the last item\n      // and the last item is too long, it should shortened.\n      lastItem  = (noRoomForFullLastItem) ? breadcrumbsObj.lastItemShort : breadcrumbsObj.lastItemFull;\n      \n      //add the overflow obj to the beginning of the array, and follow it up with all the shortened strings, \n      //starting with the point we stopped at with the pointer, and going till the last item, which is dynamically determined.\n      slicedStrArray = [overflowObj].concat(breadcrumbsObj.shortenedItems.slice(pointer, strArray.length-1)).concat(lastItem);\n      \n      return accept(slicedStrArray);\n      });\n    },\n    \n\n    /**\n     * This method is used to determine where the path click came from - we have 3 different options, \n     * 1. the text\n     * 2. the down chevron\n     * 3. The side chevron\n     * but we really want the encompossing LI, regardless of what was clicked. \n     * the two icons have a _iconsetName property that is 'fa' so we use that to determine if they were clicked, \n     * and if so, grab their parent, which is the LI.\n     * @param {*} evt the event generated by the user tap\n     */\n    _normalizePathClickTarget(evt) {\n      return (evt.target._iconsetName === 'fa') ? evt.target.parentNode.parentNode : evt.target;\n    },\n    /**\n     * This method resets the existing _selectedItem\n     */\n    _resetSelectedItem() {\n      this.set('_selectedItem', false);\n    },\n    /**\n     * This method is called on load, to calculate the initial Path, \n     * everytime a breadcrumb is clicked.\n     * it recursively builds the path, and returns it as a promise.\n     */\n    _calculatePath() {\n      return new Promise((accept, reject) => {\n          var graph = this.graph || new Graph(this.breadcrumbData, this),\n            pathArray = graph.selectedItemPath;\n        \n        this.set('graph', graph);\n        \n        return accept(pathArray);\n        \n      });\n    },\n    _addParentPropToItem(parent) {\n      var i=0,\n          children = parent.children,\n          len = children.length,\n          breadcrumbsObj = this.breadcrumbsObj;\n\n      for (; i<len;i++) {\n        var newItem = {};\n        newItem.children = children[i].children;\n        newItem.text = children[i].text;\n        newItem.hasChildren = children[i].hasChildren;\n        newItem.selectedItem = children[i].selectedItem;\n        newItem.parent = parent;\n\n        breadcrumbsObj._addToWeakMap = newItem;\n      }\n    },\n    /**\n     * This function checks whether the item in question has siblings.\n     * @param {*} itemInPath \n     */\n    _doesItemHaveSiblings(itemInPath) {\n      \n      var graph = this.graph,\n          source = itemInPath.source ? itemInPath.source : itemInPath,\n          isItemOverflow = itemInPath.text === '...' ? true : false;\n\n      debugger;\n      return (!isItemOverflow)  ? graph.hasSiblings(source) : false;\n    },\n    /**\n     * This function is used to determine whether we are on the last Item in the array. - if \n     * the index equalsthe last item in the aray (length -1), we return false.\n     * @param {Number} index the index of the item\n     */\n    _isLastItemInData(index) {\n      return this._mainPathItems.length-1 === index;\n    },\n    /**\n     * this method calls a reset on whatever selected Item we \n     * previously had, and calls a set on the new selectedItem, as well as calls prepareData which determines \n     * how the breadcrumbs will show up.\n     * @param {Object} evt the click event from the dropdown item clicked\n     */\n    _dropdownTap(evt) {\n      //this._resetSelectedItem();\n      var newSelectItem = evt.model.item.source ? evt.model.item.source : evt.model.item;\n      //this._setSelectedItem(newSelectItem);\n      //this hides the dropdown\n      this.set('_isDropdownHidden', true);\n      this._changePathFromClick(newSelectItem);\n      //and this clears out the field that hold the previously clicked\n      //path item.\n      this.set('_clickPathItem', {});\n      \n    },\n    /**\n     * This method calls the prepareData method, which runs through the \n     */\n    _changePathFromClick(item) {\n      \n      var graph = this.graph,\n          source = item.source ? item.source : item,\n          mainPathItems = graph.getPathToItem(source);\n      this._breadcrumbsDisplayOptions(mainPathItems)\n      .then((mainPathItems) => {\n        this.set('_mainPathItems', mainPathItems);\n      });\n\n      \n    },\n    _foundSelectedItem(evt) {\n      this._setSelectedItem(evt.detail.item);\n    },\n    /**\n     * This method sets a _selectedItem from the passed object.\n     * @param {Object} selectedItem the new selected item\n     */\n    _handleSelectedItem(selectedItem) {\n      \n      selectedItem.selectedItem = true;\n      this.set('_selectedItem', selectedItem);\n    },\n    /* on tap, we need to find out if the clicked item is the same as before.\n    * if it is, we make the dropdown go way.\n    * if it is not, we save the new clicked item.\n    */\n    _onPathTap(evt) {\n      var dataItem = evt.model.item;\n\n      //if the item that is clicked is the open option, hide the dropdown, and reset the _clickPathItem object.\n      if (this._clickPathItem === dataItem) {\n        this.set('_isDropdownHidden', true);\n        this.set('_clickPathItem', {});\n        return;\n      }\n\n      var sourceItem = dataItem.hasOwnProperty('source') ? dataItem.source : dataItem,\n          isClickedItemOverflow = dataItem.text ==='...' ? true : false;\n\n      if (isClickedItemOverflow) {\n        this.set('_clickedItemChildren', dataItem.children);\n        return;\n      }\n\n      if (this._doesItemHaveSiblings(sourceItem)) {\n        var graph = this.graph,\n              siblings = graph.getSiblings(sourceItem);\n        this.set('_clickedItemChildren', siblings);\n\n        //new click on new item, set the clicked item, show the dropdown and set its position.\n        this.set('_clickPathItem', dataItem);\n        this.set('_isDropdownHidden', false);\n\n        this._changeDropdownPosition(evt);\n\n        return;\n      }\n\n      this.set('_clickedItemChildren', []);\n      this._changePathFromClick(dataItem.source ? dataItem.source : dataItem);\n\n      \n    },\n    /**\n     * @param {Object} positioning an object which holds the new positioning for the dropdown\n     */\n    _changeDropdownPosition(evt) {\n      var normalizedTarget = this._normalizePathClickTarget(evt),\n          targetRect = normalizedTarget.getBoundingClientRect(),\n          targetLeft = targetRect.left,\n          targetBottom = targetRect.bottom,\n          targetHeight = targetRect.height,\n          windowScrollX = window.scrollX,\n          windowScrollY = window.scrollY,\n          dropdown = Polymer.dom(this.root).querySelector('.breadCrumbdropdown');\n      \n      dropdown.style.top = (targetBottom + windowScrollY + 4) + 'px';\n      dropdown.style.left = targetLeft + windowScrollX + 'px';\n    },\n    /**\n     * This method dispatches a custom event ('px-breadcrumbs-item-clicked') that has the item attached to it.\n     * the 'composed: true' property makes it so the event passes through shadow dom boundaries.\n     * @param {*} item the item that was clicked on.\n     */\n    _notifyClick(item) {\n      this.fire('px-breadcrumbs-item-clicked', {item: item, composed: true});\n    },\n    \n  });\n  \n  class Breadcrumbs {\n    constructor(breadcrumbs = [], graph) {\n      this.graph = graph;\n      this.breadcrumbs = breadcrumbs;\n      this.map = new WeakMap();\n      this.ctx = this._createCanvas();\n      this._preShortenItems(this.breadcrumbs);\n      return this;\n    }\n    \n    get sizeOfFullBreadcrumbs() {\n      this.__sizeOfFullBreadcrumbs = this.__sizeOfFullBreadcrumbs || this._calculateSizeOfBreadcrumbs(this.breadcrumbs);\n      return this.__sizeOfFullBreadcrumbs;\n    }\n    get sizeOfAllShortenedItemsExcludingLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(0, this.breadcrumbs.length-1), false);\n    }\n    get sizeOfFullLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1));\n    }\n    get sizeOfShortLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1), false);\n    }\n    get lastItemFull() {\n      return this.breadcrumbs.slice(-1)[0];\n    }\n    get lastItemShort() {\n      return this.shortenedItems.slice(-1)[0];\n    }\n    get shortenedItems() {\n      this.__shortenedItems = this.__shortenedItems ||  this.breadcrumbs.map((item) => {\n        var wrapper = {};\n        wrapper.source = item;\n        wrapper.isTruncated = true;\n        wrapper.text = this._getShortenedText(item);\n        wrapper.children = item.children;\n        wrapper.selectedItem = item.selectedItem;\n        wrapper.hasChildren = item.hasChildren;\n        return wrapper;\n      });\n      return this.__shortenedItems;\n    }\n    get sizeOfEllipsis() {\n      return parseInt(this.ctx.measureText('...').width,10)\n    }\n    get sizeOfAllShortenedItems() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs, false);\n    }\n    get allShortenedItemsExcludingLast() {\n      return this.shortenedItems.slice(0, this.shortenedItems.length -1);\n    }\n    get sizeOfAllShortenedItems() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs, false);\n    }\n\n    _addToWeakMap(item) {\n      const cachedItem = this.map.get(item) || null;\n      if (!cachedItem) {\n        this.map.set(item, item);  \n      }\n    }\n    _preShortenItems(items) {\n      for (let item of items) {\n        this._getShortenedText(item);\n      }\n    }\n    _getShortenedText(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortText = cachedItem.shortText || `${item.text.substr(0,6)}...${item.text.substr(item.text.length-6)}`;\n      this.map.set(item, cachedItem);\n      return cachedItem.shortText;\n    }\n    _sizeOfIndividualFullItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.fullSize = (cachedItem.fullSize || parseInt(this.ctx.measureText(item.text).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.fullSize;\n    }\n    sizeOfIndividualShortItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortSize = (cachedItem.shortSize || parseInt(this.ctx.measureText(cachedItem.shortText).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.shortSize;\n    }\n    _calculateSizeOfBreadcrumbs(strArray, useFullSize=true) {\n      if (strArray) {\n        let accum = 0,\n            i = 0,\n            len = strArray.length,\n            sizeOfItem;\n\n        for (i=0; i<len;i++,sizeOfItem=null) {\n          \n          if (useFullSize) {\n            sizeOfItem = this._sizeOfIndividualFullItem(strArray[i]);\n          } else {\n            sizeOfItem = this.sizeOfIndividualShortItem(strArray[i]);\n          }\n          var source = strArray[i].source ? strArray[i].source : strArray[i];\n          accum += sizeOfItem + 15; //the 15 is for the right angle.\n          //if the item has siblings, we need to add the size of the down chevron.\n          console.log('strArray[i].text = ' + strArray[i].text);\n          if (strArray[i].text !== \"...\" && this.graph.hasSiblings(source)) {\n            accum += 11;\n          }\n        }\n        return accum;\n      }\n    }\n    _createCanvas() {\n      const canvas = document.createElement('canvas');\n      \n      canvas.height = 20;\n      canvas.width = 9999;\n\n      const ctx = canvas.getContext('2d');\n      ctx.font = \"15px GE Inspira Sans\";\n      return ctx;\n    }\n  };\n  \n  class Graph {\n    constructor(nodes) {\n      this.map = new WeakMap();\n      this._selectedItem = null;\n      this.graph = this._crawlGraph(nodes);\n      this.nodes = nodes;\n      return this;\n    }\n    _crawlGraph(nodes) {\n      \n      var recursiveLoopThroughObj = function(nodes, parent, path=[]) {\n          for (var i=0, len = nodes.length; i<len;i++) {\n          var metaData = {},\n            itemPath;\n\n            if (parent) {\n              metaData.parent = parent;\n            }\n            \n            if (nodes.length >1) {\n              metaData.siblings = nodes;\n            }\n                        \n            itemPath = path.concat([nodes[i]]);\n            \n            if (nodes[i].children) {\n              //if it has children, we want to keep digging in\n              //so we push the item we are on into the pathArray\n              //and call ourselves with the children of the current item\n              metaData.children = nodes[i].children;\n              \n\n              recursiveLoopThroughObj.call(this,nodes[i].children, nodes[i], itemPath);\n            }\n\n            metaData.path = itemPath;\n            \n            if (nodes[i].selectedItem) {\n              this._selectedItem = nodes[i];\n\n              //add the parent and the selected item itself to the path\n              //metaData.path = path.concat(parent);\n            }\n            this.map.set(nodes[i], metaData);\n          }\n\n        }.bind(this);\n\n        //the initial call into the recursion\n        recursiveLoopThroughObj(nodes);\n    }\n    get selectedItem() {\n      return this._selectedItem;\n    }\n    get selectedItemPath() {\n      \n      var metaData = this.map.get(this._selectedItem);\n      return (metaData) ? metaData.path : undefined;\n    }\n    handleSelectedItem(item) {\n      this.selectedItem = item;\n      return this.selectedItemPath;\n    }\n    getPathToItem(item) {\n      var metaData = this.map.get(item);\n      return metaData.path;\n    }\n    hasSiblings(item) {\n      debugger;\n      var siblings = this.map.get(item).siblings;\n      return siblings && siblings.length >1;\n    }\n    getSiblings(item) {\n      var siblings = this.map.get(item).siblings;\n      return siblings;\n    }\n    set selectedItem(item) {\n      if (item) {\n        this._selectedItem.selectedItem = false;\n      item.selectedItem = true;\n      this._selectedItem = item;\n      }\n    }\n  }\n})();\n"]}