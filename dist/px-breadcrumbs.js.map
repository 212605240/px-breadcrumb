{"version":3,"sources":["px-breadcrumbs.es6.js"],"names":["window","Polymer","is","behaviors","PxAppBehavior","AssetGraph","AssetSelectable","IronResizableBehavior","properties","_mainPathItems","type","Array","value","readOnly","_clickPathItem","Object","_clickedItemChildren","_selectedItem","_ulWidth","Number","_selectedItemPath","clickOnlyMode","Boolean","observer","searchMode","_hideNoResultLi","_breadcrumbsObj","listeners","observers","detached","isDebouncerActive","cancelDebouncer","_onResize","debounce","requestAnimationFrame","breadcrumbsContainer","dom","root","querySelector","breadcrumbsUlContainer","bcUlContainerRect","getBoundingClientRect","set","width","_getBreadcrumbsObj","itemPath","graph","_assetGraph","length","pxBreadcrumbs","Breadcrumbs","updateStyles","_getDisplayMode","ulWidth","breadcrumbsObj","sizeOfFullBreadcrumbs","_set_mainPathItems","sizeOfAllShortenedItemsExcludingLastItem","sizeOfFullLastItem","strArrayShortenedWithFullLastItem","allShortenedItemsExcludingLast","concat","lastItemFull","sizeOfAllShortenedItems","strArrayShortened","shortenedItems","_createArrayWithOverflow","strArray","pointer","currentAccumSize","sizeOfEllipsis","noRoomForFullLastItem","lastItem","overflowObj","slicedStrArray","removedSize","_sizeOfIndividualShortItem","children","slice","forEach","child","highlighted","lastItemShort","_isNotFirstItemInData","index","_onSelect","evt","_set_selectedItemPath","detail","path","_doesItemHaveSiblings","itemInPath","source","isItemOverflow","label","hasSiblings","_dropdownTap","target","rootTarget","newSelectItem","items","find","item","id","selected","_changePathFromClick","select","fire","_onPathTap","dataItem","model","isClickedItemOverflow","siblings","getSiblings","siblingsCopy","map","sibling","assign","_isLabel","_isDropdown","_isOverflow","_getSeparatorSize","breadcrumbEl","breadcrumbs","WeakMap","ctx","_createCanvas","_preShortenItems","cachedItem","get","_getShortenedText","shortText","substr","fullSize","parseInt","measureText","shortSize","useFullSize","accum","i","len","sizeOfItem","_sizeOfIndividualFullItem","style","getComputedStyle","fontSize","getPropertyValue","fontFamily","canvas","document","createElement","height","getContext","font","__sizeOfFullBreadcrumbs","_calculateSizeOfBreadcrumbs","__shortenedItems","wrapper","isTruncated","selectedItem","hasChildren"],"mappings":"wpBAAA,CAAC,SAASA,MAAT,CAAiB,CAChBC,QAAQ,CAENC,GAAI,gBAFE,CAINC,UAAW,CACTC,cAAcC,UADL,CAETD,cAAcE,eAFL,CAGTL,QAAQM,qBAHC,CAJL,CAUNC,WAAY,CAKVC,eAAgB,CACdC,KAAMC,KADQ,CAEdC,MAAO,gBAAW,CAAC,MAAO,EAAI,CAFhB,CAGdC,SAAU,IAHI,CALN,CAaVC,eAAgB,CACdJ,KAAMK,MADQ,CAEdH,MAAO,gBAAW,CAAC,MAAO,EAAI,CAFhB,CAbN,CAqBVI,qBAAsB,CACpBN,KAAMC,KADc,CAEpBC,MAAO,gBAAW,CAAE,MAAO,EAAK,CAFZ,CArBZ,CA4BVK,cAAe,CACbP,KAAMK,MADO,CA5BL,CAoCVG,SAAU,CACRR,KAAMS,MADE,CAERP,MAAO,CAFC,CApCA,CA6CVQ,kBAAmB,CACjBV,KAAMC,KADW,CAEjBC,MAAO,gBAAW,CAAC,MAAO,EAAI,CAFb,CAGjBC,SAAU,IAHO,CA7CT,CAqDVQ,cAAe,CACbX,KAAMY,OADO,CAEbV,MAAO,KAFM,CAGbW,SAAU,oBAHG,CArDL,CA0DVC,WAAY,CACVd,KAAMY,OADI,CAEVV,MAAO,KAFG,CA1DF,CA8DVa,gBAAiB,CACff,KAAMY,OADS,CAEfV,MAAO,IAFQ,CA9DP,CAkEVc,gBAAiB,CACfhB,KAAMK,MADS,CAlEP,CAVN,CAiFNY,UAAW,CACT,cAAe,WADN,CAET,wBAAyB,WAFhB,CAGT,gCAAiC,cAHxB,CAIT,6BAA8B,oBAJrB,CAjFL,CAuFNC,UAAW,CACT,+DADS,CAvFL,CA0FNC,QA1FM,oBA0FK,CACT,GAAI,KAAKC,iBAAL,CAAuB,cAAvB,CAAJ,CAA4C,KAAKC,eAAL,CAAqB,cAArB,CAC7C,CA5FK,CAgGNC,SAhGM,qBAgGM,gBACV,KAAKC,QAAL,CAAc,cAAd,CAA8B,UAAM,CAClCjC,OAAOkC,qBAAP,CAA6B,UAAM,CACjC,GAAIC,sBAAuBlC,QAAQmC,GAAR,CAAY,MAAKC,IAAjB,EAAuBC,aAAvB,CAAqC,YAArC,CAA3B,CACIC,uBAAyBtC,QAAQmC,GAAR,CAAYD,oBAAZ,EAAkCG,aAAlC,CAAgD,IAAhD,CAD7B,CAEIE,kBAAoBD,uBAAuBE,qBAAvB,EAFxB,CAGA,MAAKC,GAAL,CAAS,UAAT,CAAqBF,kBAAkBG,KAAvC,CACD,CALD,CAMD,CAPD,CAOE,EAPF,CAQD,CAzGK,CA0GNC,kBA1GM,8BA0Ge,CACnB,GAAIC,UAAW,KAAKzB,iBAAL,EAA0B,EAAzC,CACI0B,MAAQ,KAAKC,WADjB,CAEI1B,cAAgB,KAAKA,aAFzB,CAGA,GAAI,CAACwB,SAASG,MAAV,EAAoB,CAACF,KAAzB,CAAgC,OAChC,KAAKJ,GAAL,CAAS,iBAAT,CAA4B,GAAI1C,QAAOiD,aAAP,CAAqBC,WAAzB,CAAqC,IAArC,CAA2CJ,KAA3C,CAAkDzB,aAAlD,CAAiEwB,QAAjE,CAA5B,EACA,KAAKM,YAAL,EACD,CAjHK,CA0HNC,eA1HM,2BA0HY,CAEhB,GAAIC,SAAU,KAAKnC,QAAnB,CACI2B,SAAW,KAAKzB,iBAAL,EAA0B,EADzC,CAEIkC,eAAiB,KAAK5B,eAF1B,CAIA,GAAI,CAAC2B,OAAD,EAAY,CAACR,QAAb,EAAyB,CAACS,cAA9B,CAA8C,OAO9C,GAAID,QAAUC,eAAeC,qBAA7B,CAAoD,CAClD,KAAKC,kBAAL,CAAwBX,QAAxB,EACA,MACD,CAOD,GAAIQ,QAAUC,eAAeG,wCAAf,CAA0DH,eAAeI,kBAAvF,CAA2G,CACzG,GAAIC,mCAAoCL,eAAeM,8BAAf,CAA8CC,MAA9C,CAAqDP,eAAeQ,YAApE,CAAxC,CACA,KAAKN,kBAAL,CAAwBG,iCAAxB,EACA,MACD,CAMD,GAAIN,QAAUC,eAAeS,uBAA7B,CAAsD,CACpD,GAAIC,mBAAoBV,eAAeW,cAAvC,CACA,KAAKT,kBAAL,CAAwBQ,iBAAxB,EACA,MACD,CAMD,KAAKR,kBAAL,CAAwB,KAAKU,wBAAL,CAA8BrB,QAA9B,CAAwCQ,OAAxC,CAAiDC,cAAjD,CAAxB,CAED,CAvKK,CA+KNY,wBA/KM,mCA+KmBC,QA/KnB,CA+K6BjD,QA/K7B,CA+KuCoC,cA/KvC,CA+KuD,CAE3D,GAAIc,SAAU,CAAd,CACIC,iBAAmBf,eAAeG,wCADtC,CAEIC,mBAAqBJ,eAAeI,kBAFxC,CAGIY,eAAiB,EAHrB,CAIIC,sBAAwB,KAJ5B,CAKIC,SAAW,EALf,CAMIC,YAAc,CAAC,QAAS,KAAV,CAAiB,cAAe,IAAhC,CANlB,CAOIC,eAAiB,EAPrB,CAUA,MAAOxD,SAAWoD,eAAiBD,gBAAjB,CAAoCX,kBAAtD,CAA0E,CAGxE,GAAIU,UAAYD,SAASnB,MAAT,CAAgB,CAAhC,CAAmC,CACjCuB,sBAAwB,IAAxB,CACA,KACD,CAED,GAAII,aAAcrB,eAAesB,0BAAf,CAA0CT,SAASC,OAAT,CAA1C,CAAlB,CAEAC,kBAAoBM,WAApB,CAEAP,SACD,CAGDK,YAAYI,QAAZ,CAAuBV,SAASW,KAAT,CAAe,CAAf,CAAkBV,OAAlB,CAAvB,CAIAK,YAAYI,QAAZ,CAAqBE,OAArB,CAA6B,SAACC,KAAD,CAAW,CACpCA,MAAMC,WAAN,CAAoB,KACvB,CAFD,EAKAT,SAAaD,qBAAD,CAA0BjB,eAAe4B,aAAzC,CAAyD5B,eAAeQ,YAApF,CAIAY,eAAiB,CAACD,WAAD,EAAcZ,MAAd,CAAqBP,eAAeW,cAAf,CAA8Ba,KAA9B,CAAoCV,OAApC,CAA6CD,SAASnB,MAAT,CAAgB,CAA7D,CAArB,EAAsFa,MAAtF,CAA6FW,QAA7F,CAAjB,CACA,MAAOE,eAER,CA3NK,CAgONS,qBAhOM,gCAgOgBC,KAhOhB,CAgOuB,CAC3B,MAAOA,SAAU,CAClB,CAlOK,CAmONC,SAnOM,oBAmOIC,GAnOJ,CAmOS,CACb,KAAKC,qBAAL,CAA2BD,IAAIE,MAAJ,CAAWC,IAAtC,EACA,KAAK7C,kBAAL,EACD,CAtOK,CA2ON8C,qBA3OM,gCA2OgBC,UA3OhB,CA2O4B,CAChC,GAAI7C,OAAQ,KAAKC,WAAjB,CACI6C,OAASD,WAAWC,MAAX,CAAoBD,WAAWC,MAA/B,CAAwCD,UADrD,CAEIE,eAAiBF,WAAWG,KAAX,GAAqB,KAArB,CAA6B,IAA7B,CAAoC,KAFzD,CAIA,MAAOD,gBAAkB,IAAlB,CAAyB/C,MAAMiD,WAAN,CAAkBH,MAAlB,CACjC,CAjPK,CAqPNI,YArPM,uBAqPOV,GArPP,CAqPY,CAChB,GAAIW,QAAShG,QAAQmC,GAAR,CAAYkD,GAAZ,EAAiBY,UAA9B,CACA,GAAIC,cAAJ,CACA,GAAIF,QAAUA,OAAOG,KAArB,CAA4B,CAC1BD,cAAgBF,OAAOG,KAAP,CAAaC,IAAb,CAAkB,SAASC,IAAT,CAAe,CAC/C,GAAIA,KAAKC,EAAL,GAAYN,OAAOO,QAAvB,CAAiC,CAC/B,MAAOF,KACR,CACF,CAJe,CAKjB,CACD,KAAKG,oBAAL,CAA0BN,eAAiB,EAA3C,CACD,CAhQK,CAqQNM,oBArQM,+BAqQeH,IArQf,CAqQqB,CACzB,KAAKI,MAAL,CAAYJ,IAAZ,EACA,KAAKK,IAAL,CAAU,6BAAV,CAAyCL,IAAzC,CAMD,CA7QK,CAqRNM,UArRM,qBAqRKtB,GArRL,CAqRU,CACd,GAAIuB,UAAWvB,IAAIwB,KAAJ,CAAUR,IAAV,CAAeV,MAAf,CAAwBN,IAAIwB,KAAJ,CAAUR,IAAV,CAAeV,MAAvC,CAAgDN,IAAIwB,KAAJ,CAAUR,IAAzE,CACA,GAAIS,uBAAwBF,SAASf,KAAT,GAAkB,KAAlB,CAA0B,IAA1B,CAAiC,KAA7D,CAGA,GAAI,KAAKzE,aAAL,EAAsB,CAAC0F,qBAA3B,CAAkD,CAEhD,KAAKN,oBAAL,CAA0BI,QAA1B,EACA,MACD,CAOD,GAAI,KAAKnB,qBAAL,CAA2BmB,QAA3B,GAAwCE,qBAA5C,CAAmE,CACjE,GAAIjE,OAAQ,KAAKC,WAAjB,CACIiE,SAAW,CAACD,qBAAD,CAAyBjE,MAAMmE,WAAN,CAAkBJ,QAAlB,CAAzB,CAAuDA,SAAShC,QAD/E,CAIA,GAAIqC,cAAeF,SAASG,GAAT,CAAa,SAACC,OAAD,CAAa,CAC3C,MAAOrG,QAAOsG,MAAP,CAAc,EAAd,CAAkBD,OAAlB,CAA2B,CAAC,MAAOA,QAAQb,EAAhB,CAAoB,MAAOa,QAAQtB,KAAnC,CAA3B,CACR,CAFkB,CAAnB,CAGA,KAAKpD,GAAL,CAAS,sBAAT,CAAiCwE,YAAjC,EACA,KAAKxE,GAAL,CAAS,gBAAT,CAA2BmE,QAA3B,CAIH,CAbC,IAaK,CACH,KAAKnE,GAAL,CAAS,sBAAT,CAAiC,EAAjC,EACA,KAAK+D,oBAAL,CAA0BI,QAA1B,CACD,CACF,CAtTK,CA2TNS,QA3TM,mBA2TGhB,IA3TH,CA2TSjF,aA3TT,CA2TwB,CAC5B,MAAQA,gBAAiBiF,KAAKR,KAAL,GAAe,KAAjC,EAA4C,CAACzE,aAAD,EAAkB,CAAC,KAAKqE,qBAAL,CAA2BY,IAA3B,CACvE,CA7TK,CAkUNiB,WAlUM,sBAkUMjB,IAlUN,CAkUYjF,aAlUZ,CAkU2B,CAC/B,MAAO,CAACA,aAAD,EAAkBiF,KAAKR,KAAL,GAAe,KAAjC,EAA0C,KAAKJ,qBAAL,CAA2BY,IAA3B,CAClD,CApUK,CAyUNkB,WAzUM,sBAyUMlB,IAzUN,CAyUY,CAChB,MAAOA,MAAKR,KAAL,GAAe,KACvB,CA3UK,CAgVN2B,iBAhVM,4BAgVYpG,aAhVZ,CAgV2B,CAC/B,MAAO,MAAKA,aAAL,CAAqB,OAArB,CAA+B,OACvC,CAlVK,CAAR,EADgB,GAsVV6B,YAtVU,YAuVd,qBAAYwE,YAAZ,CAA0B5E,KAA1B,CAAiCzB,aAAjC,CAAkE,IAAlBsG,YAAkB,2DAAJ,EAAI,mCAChE,KAAKD,YAAL,CAAoBA,YAApB,CACA,KAAK5E,KAAL,CAAaA,KAAb,CACA,KAAKzB,aAAL,CAAqBA,aAArB,CACA,KAAKsG,WAAL,CAAmBA,WAAnB,CACA,KAAKR,GAAL,CAAW,GAAIS,QAAf,CACA,KAAKC,GAAL,CAAW,KAAKC,aAAL,CAAmBJ,YAAnB,CAAX,CACA,KAAKK,gBAAL,CAAsB,KAAKJ,WAA3B,EACA,MAAO,KACR,CAhWa,4EA6aArB,IA7aA,CA6aM,CAClB,GAAM0B,YAAa,KAAKb,GAAL,CAASc,GAAT,CAAa3B,IAAb,GAAsB,IAAzC,CACA,GAAI,CAAC0B,UAAL,CAAiB,CACf,KAAKb,GAAL,CAASzE,GAAT,CAAa4D,IAAb,CAAmBA,IAAnB,CACD,CACF,CAlba,0DAubGF,KAvbH,CAubU,iGACtB,kBAAiBA,KAAjB,oHAAwB,IAAfE,KAAe,aACtB,KAAK4B,iBAAL,CAAuB5B,IAAvB,CACD,CAHqB,4LAIvB,CA3ba,4DAgcIA,IAhcJ,CAgcU,CACtB,GAAM0B,YAAa,KAAKb,GAAL,CAASc,GAAT,CAAa3B,IAAb,GAAsB,EAAzC,CACA,GAAG,CAAC0B,WAAWG,SAAZ,EAAyB7B,KAAKR,KAAL,CAAW9C,MAAX,CAAoB,EAAhD,CAAoD,CAClDgF,WAAWG,SAAX,CAA0B7B,KAAKR,KAAL,CAAWsC,MAAX,CAAkB,CAAlB,CAAoB,CAApB,CAA1B,OAAsD9B,KAAKR,KAAL,CAAWsC,MAAX,CAAkB9B,KAAKR,KAAL,CAAW9C,MAAX,CAAkB,CAApC,CACvD,CAFD,IAGK,IAAG,CAACgF,WAAWG,SAAf,CAA0B,CAC7BH,WAAWG,SAAX,CAAuB7B,KAAKR,KAC7B,CACD,KAAKqB,GAAL,CAASzE,GAAT,CAAa4D,IAAb,CAAmB0B,UAAnB,EACA,MAAOA,YAAWG,SACnB,CA1ca,4EA+cY7B,IA/cZ,CA+ckB,CAC9B,GAAM0B,YAAa,KAAKb,GAAL,CAASc,GAAT,CAAa3B,IAAb,GAAsB,EAAzC,CACA0B,WAAWK,QAAX,CAAuBL,WAAWK,QAAX,EAAuBC,SAAS,KAAKT,GAAL,CAASU,WAAT,CAAqBjC,KAAKR,KAA1B,EAAiCnD,KAA1C,CAAgD,EAAhD,CAA9C,CACA,KAAKwE,GAAL,CAASzE,GAAT,CAAa4D,IAAb,CAAmB0B,UAAnB,EACA,MAAOA,YAAWK,QACnB,CApda,8EAyda/B,IAzdb,CAydmB,CAC/B,GAAM0B,YAAa,KAAKb,GAAL,CAASc,GAAT,CAAa3B,IAAb,GAAsB,EAAzC,CACA0B,WAAWQ,SAAX,CAAwBR,WAAWQ,SAAX,EAAwBF,SAAS,KAAKT,GAAL,CAASU,WAAT,CAAqBP,WAAWG,SAAhC,EAA2CxF,KAApD,CAA0D,EAA1D,CAAhD,CACA,KAAKwE,GAAL,CAASzE,GAAT,CAAa4D,IAAb,CAAmB0B,UAAnB,EACA,MAAOA,YAAWQ,SACnB,CA9da,gFAoecrE,QAped,CAoe0C,IAAlBsE,YAAkB,2DAAN,IAAM,CACtD,GAAItE,QAAJ,CAAc,CACZ,GAAIuE,OAAQ,CAAZ,CACIC,EAAI,CADR,CAEIC,IAAMzE,SAASnB,MAFnB,CAGI6F,iBAHJ,CAKA,IAAKF,EAAE,CAAP,CAAUA,EAAEC,GAAZ,CAAgBD,IAAIE,WAAW,IAA/B,CAAqC,CAEnC,GAAIJ,WAAJ,CAAiB,CACfI,WAAa,KAAKC,yBAAL,CAA+B3E,SAASwE,CAAT,CAA/B,CACd,CAFD,IAEO,CACLE,WAAa,KAAKjE,0BAAL,CAAgCT,SAASwE,CAAT,CAAhC,CACd,CACD,GAAI/C,QAASzB,SAASwE,CAAT,EAAY/C,MAAZ,CAAqBzB,SAASwE,CAAT,EAAY/C,MAAjC,CAA0CzB,SAASwE,CAAT,CAAvD,CAEAD,OAASG,UAAT,CAEA,GAAI1E,SAASwE,CAAT,EAAY7C,KAAZ,GAAsB,KAAtB,EAA+B,KAAKhD,KAAL,CAAWiD,WAAX,CAAuBH,MAAvB,CAA/B,EAAiE,CAAC,KAAKvE,aAA3E,CAA0F,CACxFqH,OAAS,EACV,CAEDA,OAAS,EAAT,CAGA,GAAIC,IAAMC,IAAI,CAAd,CAAgB,CACdF,OAAS,KAAKrH,aAAL,CAAqB,EAArB,CAA0B,EACpC,CACF,CACD,MAAOqH,OAAQ,EAChB,CACF,CAngBa,oDAwgBAhB,YAxgBA,CAwgBc,CAC1B,GAAIqB,OAAQ/I,OAAOgJ,gBAAP,CAAwBtB,YAAxB,CAAsC,IAAtC,CAAZ,CACIuB,SAAWF,MAAMG,gBAAN,CAAuB,WAAvB,CADf,CAEIC,WAAaJ,MAAMG,gBAAN,CAAuB,aAAvB,CAFjB,CAIA,GAAME,QAASC,SAASC,aAAT,CAAuB,QAAvB,CAAf,CAEAF,OAAOG,MAAP,CAAgB,EAAhB,CACAH,OAAOzG,KAAP,CAAe,IAAf,CAEA,GAAMkF,KAAMuB,OAAOI,UAAP,CAAkB,IAAlB,CAAZ,CACA3B,IAAI4B,IAAJ,CAAWR,SAAW,GAAX,CAAiBE,UAA5B,CACA,MAAOtB,IACR,CArhBa,iDAsWc,CAC1B,KAAK6B,uBAAL,CAA+B,KAAKA,uBAAL,EAAgC,KAAKC,2BAAL,CAAiC,KAAKhC,WAAtC,CAA/D,CACA,MAAO,MAAK+B,uBACb,CAzWa,oEA6WiC,CAC7C,MAAO,MAAKC,2BAAL,CAAiC,KAAKhC,WAAL,CAAiB7C,KAAjB,CAAuB,CAAvB,CAA0B,KAAK6C,WAAL,CAAiB3E,MAAjB,CAAwB,CAAlD,CAAjC,CAAuF,KAAvF,CACR,CA/Wa,8CAmXW,CACvB,MAAO,MAAK2G,2BAAL,CAAiC,KAAKhC,WAAL,CAAiB7C,KAAjB,CAAuB,CAAC,CAAxB,CAAjC,CACR,CArXa,+CAyXY,CACxB,MAAO,MAAK6E,2BAAL,CAAiC,KAAKhC,WAAL,CAAiB7C,KAAjB,CAAuB,CAAC,CAAxB,CAAjC,CAA6D,KAA7D,CACR,CA3Xa,wCA+XK,CACjB,MAAO,MAAK6C,WAAL,CAAiB7C,KAAjB,CAAuB,CAAC,CAAxB,EAA2B,CAA3B,CACR,CAjYa,yCAqYM,CAClB,MAAO,MAAKb,cAAL,CAAoBa,KAApB,CAA0B,CAAC,CAA3B,EAA8B,CAA9B,CACR,CAvYa,0CA2YO,iBACnB,KAAK8E,gBAAL,CAAwB,KAAKA,gBAAL,EAA0B,KAAKjC,WAAL,CAAiBR,GAAjB,CAAqB,SAACb,IAAD,CAAU,CAC/E,GAAIuD,SAAU,EAAd,CACAA,QAAQjE,MAAR,CAAiBU,IAAjB,CACAuD,QAAQC,WAAR,CAAsB,IAAtB,CACAD,QAAQ/D,KAAR,CAAgB,OAAKoC,iBAAL,CAAuB5B,IAAvB,CAAhB,CACAuD,QAAQhF,QAAR,CAAmByB,KAAKzB,QAAxB,CACAgF,QAAQE,YAAR,CAAuBzD,KAAKyD,YAA5B,CACAF,QAAQG,WAAR,CAAsB1D,KAAK0D,WAA3B,CACA,MAAOH,QACR,CATiD,CAAlD,CAUA,MAAO,MAAKD,gBACb,CAvZa,0CA2ZO,CACnB,MAAO,GACR,CA7Za,mDAiagB,CAC5B,MAAO,MAAKD,2BAAL,CAAiC,KAAKhC,WAAtC,CAAmD,KAAnD,CACR,CAnaa,0DAuauB,CACnC,MAAO,MAAK1D,cAAL,CAAoBa,KAApB,CAA0B,CAA1B,CAA6B,KAAKb,cAAL,CAAoBjB,MAApB,CAA4B,CAAzD,CACR,CAzaa,0BAwhBhBhD,OAAOiD,aAAP,CAAuB,EAAvB,CACAjD,OAAOiD,aAAP,CAAqBC,WAArB,CAAmCA,WAEpC,CA3hBD,EA2hBGlD,MA3hBH","file":"px-breadcrumbs.js","sourcesContent":["(function(window) {\n  Polymer({\n\n    is: 'px-breadcrumbs',\n\n    behaviors: [\n      PxAppBehavior.AssetGraph,\n      PxAppBehavior.AssetSelectable,\n      Polymer.IronResizableBehavior\n    ],\n\n    properties: {\n      /**\n       * This property holds the dynamically generated items (full or shortened, depending on the display options)\n       * that are used for the dom repeat that draws the main path items.\n       */\n      _mainPathItems: {\n        type: Array,\n        value: function() {return [];},\n        readOnly: true\n      },\n      /**\n       * This property holds the latest clicked main path item.\n       */\n      _clickPathItem: {\n        type: Object,\n        value: function() {return {};}\n      },\n      /**\n       * This property holds all the items that are to be shown in the dropdown - these are usually siblings,\n       * but can be children if the item is an overflow item.\n       */\n      _clickedItemChildren: {\n        type: Array,\n        value: function() { return []; }\n      },\n      /**\n       * This property holds the currently selected item. We start out with no value to avoid have it run through an empty object.\n       */\n      _selectedItem: {\n        type: Object\n      },\n      /**\n       * This property holds the size of the container, against which we make all of our calculations in\n       * breadcrumbs display options.\n       * The value is auto generated either on page load, or on page resize.\n       */\n      _ulWidth: {\n        type: Number,\n        value: 0\n      },\n      /**\n       * This property holds the path to the currently selected item.\n       * This is generated dynamically by the graph whenever the _selectedItem prop changes.\n       * It is readOnly to ensure that nothing but 1 process changes it.\n       */\n      _selectedItemPath: {\n        type: Array,\n        value: function() {return [];},\n        readOnly: true\n      },\n      /**\n       * Use this mode if you want a more traditional breadcrumb path, and don't want the dropdowns to show up when a path item is clicked.\n       */\n      clickOnlyMode: {\n        type: Boolean,\n        value: false,\n        observer: '_getBreadcrumbsObj'\n      },\n      searchMode: {\n        type: Boolean,\n        value: false\n      },\n      _hideNoResultLi: {\n        type: Boolean,\n        value: true\n      },\n      _breadcrumbsObj: {\n        type: Object\n      }\n    },\n\n    listeners: {\n      'iron-resize': '_onResize',\n      'px-app-asset-selected': '_onSelect',\n      'px-dropdown-selection-changed': '_dropdownTap',\n      'px-app-asset-graph-created': '_getBreadcrumbsObj'\n    },\n    observers: [\n      '_getDisplayMode(_ulWidth, _selectedItemPath, _breadcrumbsObj)'\n    ],\n    detached() {\n      if (this.isDebouncerActive('windowResize')) this.cancelDebouncer('windowResize');\n    },\n    /**\n     * Called by iron-resize. Determines the container size.\n     */\n    _onResize() {\n      this.debounce('windowResize', () => {\n        window.requestAnimationFrame(() => {\n          var breadcrumbsContainer = Polymer.dom(this.root).querySelector('.container'),\n              breadcrumbsUlContainer = Polymer.dom(breadcrumbsContainer).querySelector('ul'),\n              bcUlContainerRect = breadcrumbsUlContainer.getBoundingClientRect();\n          this.set('_ulWidth', bcUlContainerRect.width);\n        });\n      },50);\n    },\n    _getBreadcrumbsObj() {\n      var itemPath = this._selectedItemPath || [],\n          graph = this._assetGraph,\n          clickOnlyMode = this.clickOnlyMode;\n      if (!itemPath.length || !graph) return;\n      this.set('_breadcrumbsObj', new window.pxBreadcrumbs.Breadcrumbs(this, graph, clickOnlyMode, itemPath));\n      this.updateStyles();\n    },\n    /*\n    * In this method, we decide on the display options for the breadcrumbs. We have the following options:\n    * 1. Nothing needs to be shortened.\n    * 2. Shorten all but the last one.\n    * 3. Shorten all, including the last one.\n    * 4. Shorten all of them, and include the overflow at the beginning of the array.\n    *    The last one is NOT shortened by default, but can be shortened as needed.\n    */\n    _getDisplayMode() {\n\n      var ulWidth = this._ulWidth,\n          itemPath = this._selectedItemPath || [],\n          breadcrumbsObj = this._breadcrumbsObj;\n\n      if (!ulWidth || !itemPath || !breadcrumbsObj) return;\n\n      /*\n      * Option 1:\n      * Check to see if the container (which is sized automatically to fill out the page)\n      * can fit all the items in the breadcrumbs.\n      */\n      if (ulWidth > breadcrumbsObj.sizeOfFullBreadcrumbs) {\n        this._set_mainPathItems(itemPath);\n        return;\n      }\n\n      /*\n      * Option 2:\n      * Find out if the container can now fit all the\n      * shortened items, plus the last item that wasn't shortened.\n      */\n      if (ulWidth > breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem + breadcrumbsObj.sizeOfFullLastItem) {\n        let strArrayShortenedWithFullLastItem = breadcrumbsObj.allShortenedItemsExcludingLast.concat(breadcrumbsObj.lastItemFull);\n        this._set_mainPathItems(strArrayShortenedWithFullLastItem);\n        return;\n      }\n\n      /*\n      * Option 3:\n      * Check if can fit after shortening all the items.\n      */\n      if (ulWidth > breadcrumbsObj.sizeOfAllShortenedItems) {\n        let strArrayShortened = breadcrumbsObj.shortenedItems;\n        this._set_mainPathItems(strArrayShortened);\n        return;\n      }\n\n      /*\n      * Option 4:\n      * Not all of the shortened options will fit. Have to create an array with overflow.\n      */\n      this._set_mainPathItems(this._createArrayWithOverflow(itemPath, ulWidth, breadcrumbsObj));\n\n    },\n\n    /*\n    * Called once it's established that we need to have an array with overflow.\n    * Keep removing the size of each item - starting from the beginning of the array -\n    * from the total size of all the items, until we can fit everything, plus the last item that\n    * isn't shortened into the container.\n    */\n    _createArrayWithOverflow(strArray, _ulWidth, breadcrumbsObj) {\n\n      var pointer = 0,\n          currentAccumSize = breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem,\n          sizeOfFullLastItem = breadcrumbsObj.sizeOfFullLastItem,\n          sizeOfEllipsis = 36,\n          noRoomForFullLastItem = false,\n          lastItem = {},\n          overflowObj = {\"label\": \"...\", \"hasChildren\": true},\n          slicedStrArray = [];\n\n      //keep looping until all the items fit into the container\n      while (_ulWidth < sizeOfEllipsis + currentAccumSize + sizeOfFullLastItem) {\n        //if we made it to the last item, and it's STILL can't fit, break out of the\n        // while loop, to ensure the last items doesn't go into the overflow object.\n        if (pointer === strArray.length-1) {\n          noRoomForFullLastItem = true;\n          break;\n        }\n        //get the size of the item we are placing into the overflow\n        var removedSize = breadcrumbsObj._sizeOfIndividualShortItem(strArray[pointer]);\n        // subtract the size from the overall accumulated size\n        currentAccumSize -= removedSize;\n        //and make sure to manually change our pointer.\n        pointer++;\n      }\n\n      //create the overflow object, and populate its children with the shortened strings (if necessary)\n      overflowObj.children = strArray.slice(0, pointer);\n\n      // clean up - in case the user clicked on the path, there will be a highlighted property set to true.\n      // since overflow shouldn't have anything highlighted, we clear is up, just to be sure.\n      overflowObj.children.forEach((child) => {\n          child.highlighted = false;\n      });\n      //the last item is usually full size, but, if if it's just the overflow and the last item\n      // and the last item is too long, it should shortened.\n      lastItem  = (noRoomForFullLastItem) ? breadcrumbsObj.lastItemShort : breadcrumbsObj.lastItemFull;\n\n      //add the overflow obj to the beginning of the array, and follow it up with all the shortened strings,\n      //starting with the point we stopped at with the pointer, and going till the last item, which is dynamically determined.\n      slicedStrArray = [overflowObj].concat(breadcrumbsObj.shortenedItems.slice(pointer, strArray.length-1)).concat(lastItem);\n      return slicedStrArray;\n\n    },\n    /**\n     * This function is used to determine whether we are on the first item in the array - used by a dom-if to check\n     * if we should display the right angle icon.\n     */\n    _isNotFirstItemInData(index) {\n      return index !== 0;\n    },\n    _onSelect(evt) {\n      this._set_selectedItemPath(evt.detail.path);\n      this._getBreadcrumbsObj();\n    },\n    /**\n     * This function checks whether the item in question has siblings.\n     * If the item is an overflow item, we return a false, since it's not going to be in the graph anyway.\n     */\n    _doesItemHaveSiblings(itemInPath) {\n      var graph = this._assetGraph,\n          source = itemInPath.source ? itemInPath.source : itemInPath,\n          isItemOverflow = itemInPath.label === '...' ? true : false;\n\n      return isItemOverflow  ? true : graph.hasSiblings(source);\n    },\n    /**\n     * Handles tap events in the dropdown. Checks each item against the currently selected item.\n     */\n    _dropdownTap(evt) {\n      var target = Polymer.dom(evt).rootTarget;\n      var newSelectItem;\n      if (target && target.items) {\n        newSelectItem = target.items.find(function(item) {\n          if (item.id === target.selected) {\n            return item;\n          }\n        });\n      }\n      this._changePathFromClick(newSelectItem || {});\n    },\n    /**\n     * Sets the _selectedItem to the item that was clicked - whether from the main path items, or the dropdown items.\n     * This is the only place we change _selectedItem on click.\n     */\n    _changePathFromClick(item) {\n      this.select(item);\n      this.fire('px-breadcrumbs-item-changed', item);\n      /**\n       * This event is fired whenever a click occurs - from a top path item, or dropdown item -\n       * that changes the context. The new context is attached as 'item'\n       * @event px-breadcrumbs-item-changed\n       */\n    },\n    /*\n    * On tap, we need to find out if the clicked item is the same as before.\n    * If it is, we empty out the dropdown, hide it, and clear the _clickPathItem (the last item clicked).\n    * If it is not the same item that was previously clicked, we save the new clicked item into _clickPathItem and\n    * set the siblings according to the item. Sometimes, a top path item has no siblings, at which point we treat\n    * the click like a dropdown click - which is to say, we change the path accordingly.\n    */\n    _onPathTap(evt) {\n      var dataItem = evt.model.item.source ? evt.model.item.source : evt.model.item;\n      var isClickedItemOverflow = dataItem.label ==='...' ? true : false;\n\n      //if the click only mode is on, just change the path\n      if (this.clickOnlyMode && !isClickedItemOverflow) {\n        //and change our path.\n        this._changePathFromClick(dataItem);\n        return;\n      }\n\n      // it's important to check if the clicked item is an overflow item, since it's the only one\n      // that isn't in our graph - if we send it into getSiblings, the graph won't know what to do with it.\n      // instead, if it IS an overflow item, we set the siblings as the children of dataItem.\n\n\n      if (this._doesItemHaveSiblings(dataItem) || isClickedItemOverflow) {\n        var graph = this._assetGraph,\n            siblings = !isClickedItemOverflow ? graph.getSiblings(dataItem) : dataItem.children;\n\n        // Need to map the id and label to key and val for use in px-dropdown\n        var siblingsCopy = siblings.map((sibling) => {\n          return Object.assign({}, sibling, {\"key\": sibling.id, \"val\": sibling.label});\n        });\n        this.set('_clickedItemChildren', siblingsCopy);\n        this.set('_clickPathItem', dataItem);\n\n      // the clicked item has no siblings - we reset the contents of the dropdown\n      // and change the path accordingly.\n    } else {\n        this.set('_clickedItemChildren', []);\n        this._changePathFromClick(dataItem);\n      }\n    },\n    /**\n     * These three methods are used to determine which type of node to render.\n     * Returns true if clickOnlyMode is turned on and its not the overflow node.\n     */\n    _isLabel(item, clickOnlyMode) {\n      return (clickOnlyMode && item.label !== \"...\") || (!clickOnlyMode && !this._doesItemHaveSiblings(item));\n    },\n    /**\n     * These three methods are used to determine which type of node to render.\n     * Returns true if clickOnlyMode is turned off and its not the overflow node.\n     */\n    _isDropdown(item, clickOnlyMode) {\n      return !clickOnlyMode && item.label !== \"...\" && this._doesItemHaveSiblings(item);\n    },\n    /**\n     * These three methods are used to determine which type of node to render.\n     * Returns true if this is the overflow node.\n     */\n    _isOverflow(item) {\n      return item.label === \"...\";\n    },\n    /**\n     * Determines whether to display small or large chevrons based on whether\n     * `clickOnlyMode` is enabled.\n     */\n    _getSeparatorSize(clickOnlyMode) {\n      return this.clickOnlyMode ? 'small' : 'large';\n    }\n  });\n\n  class Breadcrumbs {\n    constructor(breadcrumbEl, graph, clickOnlyMode, breadcrumbs = []) {\n      this.breadcrumbEl = breadcrumbEl;\n      this.graph = graph;\n      this.clickOnlyMode = clickOnlyMode;\n      this.breadcrumbs = breadcrumbs;\n      this.map = new WeakMap();\n      this.ctx = this._createCanvas(breadcrumbEl);\n      this._preShortenItems(this.breadcrumbs);\n      return this;\n    }\n\n    /**\n     * A getter that returns the size of the breadcrumb items - at full length.\n     * It checks to see if it has a value, and if so, returns the cached one, so we don't have to calculate the value again.\n     */\n    get sizeOfFullBreadcrumbs() {\n      this.__sizeOfFullBreadcrumbs = this.__sizeOfFullBreadcrumbs || this._calculateSizeOfBreadcrumbs(this.breadcrumbs);\n      return this.__sizeOfFullBreadcrumbs;\n    }\n    /**\n     * A getter that returns the short size of the breadcrumb items excluding the last item.\n     */\n    get sizeOfAllShortenedItemsExcludingLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(0, this.breadcrumbs.length-1), false);\n    }\n    /**\n     * A getter that returns the size of the full last item.\n     */\n    get sizeOfFullLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1));\n    }\n    /**\n     * A getter that returns the size of the short last item.\n     */\n    get sizeOfShortLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1), false);\n    }\n    /**\n     * A getter that returns the last item in the breadcrumb array.\n     */\n    get lastItemFull() {\n      return this.breadcrumbs.slice(-1)[0];\n    }\n    /**\n     * A getter that returns the short version of the last item in the breadcrumbs array.\n     */\n    get lastItemShort() {\n      return this.shortenedItems.slice(-1)[0];\n    }\n    /**\n     * A getter that returns an array of all the shortened items in the breadcrumbs array.\n     */\n    get shortenedItems() {\n      this.__shortenedItems = this.__shortenedItems ||  this.breadcrumbs.map((item) => {\n        var wrapper = {};\n        wrapper.source = item;\n        wrapper.isTruncated = true;\n        wrapper.label = this._getShortenedText(item);\n        wrapper.children = item.children;\n        wrapper.selectedItem = item.selectedItem;\n        wrapper.hasChildren = item.hasChildren;\n        return wrapper;\n      });\n      return this.__shortenedItems;\n    }\n    /**\n     * A getter that returns the size - in pixels - of the overflow ellipsis.\n     */\n    get sizeOfEllipsis() {\n      return 36;\n    }\n    /**\n     * A getter that returns the size - in pixels - of all the shortened breadcrumbs items.\n     */\n    get sizeOfAllShortenedItems() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs, false);\n    }\n    /**\n     * A getter that returns the size - in pixels - of all the shortened breadcrumbs items excluding the last item.\n     */\n    get allShortenedItemsExcludingLast() {\n      return this.shortenedItems.slice(0, this.shortenedItems.length -1);\n    }\n    /**\n     * Adds the item that is passed in to the weakMap if it is not already there.\n     */\n    _addToWeakMap(item) {\n      const cachedItem = this.map.get(item) || null;\n      if (!cachedItem) {\n        this.map.set(item, item);\n      }\n    }\n    /**\n     * Called when the class is instantiated. it loops through all the passed in items, and calls the _getShortenedText method on\n     * each item.\n     */\n    _preShortenItems(items) {\n      for (let item of items) {\n        this._getShortenedText(item);\n      }\n    }\n    /**\n     * Returns the shortened version of the text in the item that is passed in, as well as add it into the map.\n     * Checks for a cached version before it sets it.\n     */\n    _getShortenedText(item) {\n      const cachedItem = this.map.get(item) || {};\n      if(!cachedItem.shortText && item.label.length > 13) {\n        cachedItem.shortText = `${item.label.substr(0,6)}...${item.label.substr(item.label.length-6)}`;\n      }\n      else if(!cachedItem.shortText) {\n        cachedItem.shortText = item.label;\n      }\n      this.map.set(item, cachedItem);\n      return cachedItem.shortText;\n    }\n    /**\n     * Returns the size - in pixels - of the full size of the text in the passed in item, as well as add that info into the map.\n     * Checks for a cached version before setting this value\n     */\n    _sizeOfIndividualFullItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.fullSize = (cachedItem.fullSize || parseInt(this.ctx.measureText(item.label).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.fullSize;\n    }\n    /**\n     * Returns the size - in pixels - of the short size of the text in the passed in item, as well as add that info into the map.\n     * Checks for a cached version before setting this value\n     */\n    _sizeOfIndividualShortItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortSize = (cachedItem.shortSize || parseInt(this.ctx.measureText(cachedItem.shortText).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.shortSize;\n    }\n    /**\n     * Loops through the passed in array, and gets the size - in pixels - of all the items.\n     * The size can be determined in either short or full text.\n     * It takes into account the size of the px-icons, as well as padding on each item, and padding on the container.\n     */\n    _calculateSizeOfBreadcrumbs(strArray, useFullSize=true) {\n      if (strArray) {\n        let accum = 0,\n            i = 0,\n            len = strArray.length,\n            sizeOfItem;\n        //run through all the items, and get the sizes.\n        for (i=0; i<len;i++,sizeOfItem=null) {\n\n          if (useFullSize) {\n            sizeOfItem = this._sizeOfIndividualFullItem(strArray[i]);\n          } else {\n            sizeOfItem = this._sizeOfIndividualShortItem(strArray[i]);\n          }\n          var source = strArray[i].source ? strArray[i].source : strArray[i];\n          //add the size of the of the item into our accumulator\n          accum += sizeOfItem;\n          //if the item has siblings, we need to add the size of the down chevron.\n          if (strArray[i].label !== \"...\" && this.graph.hasSiblings(source) && !this.clickOnlyMode) {\n            accum += 21;\n          }\n          //padding on each item (10 on each side)\n          accum += 20;\n\n          //right angle arrow - the last item doesn't get a right angle.\n          if (i !== len-1){\n            accum += this.clickOnlyMode ? 30 : 15;\n          }\n        }\n        return accum + 10; // extra padding somewhere? slight miscalculation?\n      }\n    }\n    /**\n     * Creates/returns the canvas that we will use to measure the size of the text.\n     * We also set the font and font size.\n     */\n    _createCanvas(breadcrumbEl) {\n      var style = window.getComputedStyle(breadcrumbEl, null),\n          fontSize = style.getPropertyValue('font-size'),\n          fontFamily = style.getPropertyValue('font-family');\n\n      const canvas = document.createElement('canvas');\n\n      canvas.height = 20;\n      canvas.width = 9999;\n\n      const ctx = canvas.getContext('2d');\n      ctx.font = fontSize + \" \" + fontFamily;\n      return ctx;\n    }\n  }\n\n  window.pxBreadcrumbs = {};\n  window.pxBreadcrumbs.Breadcrumbs = Breadcrumbs;\n\n})(window);\n"]}