{"version":3,"sources":["px-breadcrumbs.es6.js"],"names":["Polymer","is","properties","breadcrumbData","type","Array","value","_mainPathItems","_clickPathItem","Object","_clickedItemChildren","_isDropdownHidden","Boolean","_selectedItem","ulWidth","Number","behaviors","IronResizableBehavior","listeners","observers","prepareData","_calculatePath","then","pathArray","_breadcrumbsDisplayOptions","set","_getContainerSize","debounce","window","requestAnimationFrame","breadcrumbs","document","querySelector","breadcrumbsContainer","dom","root","breadcrumbsUlContainer","bcUlContainerRect","getBoundingClientRect","width","RenderStatus","afterNextRender","strArray","Promise","accept","reject","breadcrumbsObj","Breadcrumbs","sizeOfFullBreadcrumbs","sizeOfAllShortenedItemsExcludingLastItem","sizeOfFullLastItem","strArrayShortenedWithFullLastItem","allShortenedItemsExcludingLast","concat","lastItemFull","sizeOfAllShortenedItems","strArrayShortened","shortenedItems","_createArrayWithOverflow","pointer","currentAccumSize","sizeOfEllipsis","noRoomForFullLastItem","lastItem","overflowObj","slicedStrArray","length","removedSize","sizeOfIndividualShortItem","children","slice","lastItemShort","_normalizePathClickTarget","evt","target","_iconsetName","parentNode","_resetSelectedItem","currentDataObj","self","foundSelectedItem","recursiveLoopThroughObj","pathItem","i","len","selectedItem","push","_doesItemHaveChildren","itemInPath","hasChildren","_isLastItemInData","index","_dropdownTap","newSelectItem","model","item","_setSelectedItem","_changePathFromDropdownClick","_onPathTap","dataItem","stopPropagation","_changeDropdownPosition","normalizedTarget","targetRect","targetLeft","left","targetBottom","bottom","targetHeight","height","windowScrollX","scrollX","windowScrollY","scrollY","dropdown","style","top","_notifyClick","dispatchEvent","CustomEvent","composed","map","WeakMap","ctx","_createCanvas","_preShortenItems","items","_getShortenedText","cachedItem","get","shortText","text","substr","fullSize","parseInt","measureText","shortSize","useFullSize","accum","sizeOfItem","_sizeOfIndividualFullItem","canvas","createElement","getContext","font","__sizeOfFullBreadcrumbs","_calculateSizeOfBreadcrumbs","__shortenedItems","newItem"],"mappings":"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","file":"px-breadcrumbs.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-breadcrumbs', \n\n    properties: {\n      /**\n       * This array receives/holds the data that will be transformed into the breadcrumbs.\n       */\n      breadcrumbData: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _mainPathItems: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _clickPathItem: {\n        type: Object,\n        value: function() {return {};}\n      },\n      _clickedItemChildren: {\n        type: Array,\n        value: function() {return [];},\n        \n      },\n      _isDropdownHidden: {\n        type: Boolean,\n        value: true\n      },\n      _selectedItem: {\n        type: Object\n      },\n      ulWidth: {\n        type: Number,\n        value: 0\n      }\n    },\n    behaviors: [Polymer.IronResizableBehavior],\n    listeners: {'iron-resize': '_getContainerSize'},\n    observers: ['prepareData(_selectedItem)'],\n    /**\n     * This method has a chain of promises that process the data as needed.\n     * first, we extract the path out of the data that's passed in\n     * then we figure out the display options - whether we need overflow, shorten any names, etc.\n     * lastly, we set the _mainPathItems,  with the shortened/overflow version as needed\n     */\n    prepareData() {\n      this._calculatePath()\n      .then((pathArray) => {\n        return this._breadcrumbsDisplayOptions(pathArray)})\n      .then((pathArray) => {\n        //and the second time this is being set, it's with the shortened versions, if necessary. \n        this.set('_mainPathItems', pathArray);\n      });\n    },\n    /**\n     * This method is called on initial page load, and on every page resize\n     * to find the width of the container after a draw, and queues\n     * the display options for the breadcrumbs for the next animation frame\n     * \n     */\n    _getContainerSize() {\n      this.debounce('windowResize', () => {\n        window.requestAnimationFrame(() => {\n          var breadcrumbs = document.querySelector('px-breadcrumbs'),\n              breadcrumbsContainer = Polymer.dom(breadcrumbs.root).querySelector('.container'),\n              breadcrumbsUlContainer = Polymer.dom(breadcrumbsContainer).querySelector('ul'),\n              bcUlContainerRect = breadcrumbsContainer.getBoundingClientRect();\n\n          this.set('ulWidth', bcUlContainerRect.width + 4); //the 4 is for the padding (2px on each side) on the ul.\n        });\n\n        Polymer.RenderStatus.afterNextRender(this, () =>{\n          this.prepareData();\n        });\n      },10)\n      \n    },\n    /* \n    * in this method, we decide on the display options for the breadcrumbs. \n    * we have the following options:\n    * 1. nothing needs to be shortened.\n    * 2. we can shorten all but the last one\n    * 2. we can shorten all including the last one\n    * 3. we can shorten all of them, and include the overflow at the beginning of the array. the last one is NOT shortened.\n    * @param {array} strArray an array of objects, which contains the breadcrumbs\n    */\n    _breadcrumbsDisplayOptions(strArray) {\n      return new Promise((accept, reject) => {\n        var breadcrumbsObj = new Breadcrumbs(strArray),\n            ulWidth = this.ulWidth;\n        /*\n        * option 1 \n        * we check to see if the container (which is sized automatically to fill out the page)\n        * can fit all the items in the breadcrumbs.\n        * the first option is the simpliest one - everything just fits, but if it doesn't fit...\n        */\n        if (ulWidth > breadcrumbsObj.sizeOfFullBreadcrumbs) {\n          //everything fits, no need to shorten anything\n          return accept(strArray);\n        }\n\n        /*\n        * option 2\n        * we want to find out if the container can now fit all the \n        * shortened items + the last Item that wasn't shortened\n        */\n        if (ulWidth > breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem + breadcrumbsObj.sizeOfFullLastItem) {\n          let strArrayShortenedWithFullLastItem = breadcrumbsObj.allShortenedItemsExcludingLast.concat(breadcrumbsObj.lastItemFull);\n          return accept(strArrayShortenedWithFullLastItem);\n        }\n\n        /*\n        * option 3 \n        * we check if we can fit after we've shortened all the items \n        */\n        if (ulWidth > breadcrumbsObj.sizeOfAllShortenedItems) {\n          let strArrayShortened = breadcrumbsObj.shortenedItems;\n          \n          return accept(strArrayShortened);\n        }\n\n        /*\n        * option 4\n        * we have to create an array with overflow.\n        * we only get to this if non of the if statements above are true.\n        */\n        \n        return accept(this._createArrayWithOverflow(strArray, ulWidth));\n      });\n    },\n    /*\n    * this method is called once we've established that we need to have an\n    * array with overflow.\n    * we keep removing the size of items - starting from the beginning of the array - \n    *  from the total size of all the items, until we can fit everything + the last item that isn't shortened\n    * into the container.\n    * @param {Array} strArray the array that holds the breadcrumbs\n    * @param {number} ulWidth the width of the ul container\n    */\n    _createArrayWithOverflow(strArray, ulWidth) {\n      return new Promise((accept, reject) => {\n      var pointer = 0,\n          breadcrumbsObj = new Breadcrumbs(strArray),\n          currentAccumSize = breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem,\n          sizeOfFullLastItem = breadcrumbsObj.sizeOfFullLastItem,\n          sizeOfEllipsis = breadcrumbsObj.sizeOfEllipsis,\n          noRoomForFullLastItem = false,\n          lastItem = {},\n          overflowObj = {\"text\": \"...\"},\n          slicedStrArray = [];\n\n      //keep looping until all the items fit into the container\n      while (ulWidth < sizeOfEllipsis + currentAccumSize + sizeOfFullLastItem) {\n        //if we made it to the last item, and it's STILL can't fit, break out of the \n        // while loop, to ensure the last items doesn't go into the overflow object.\n        if (pointer === strArray.length-1) {\n          noRoomForFullLastItem = true;\n          break\n        }\n        //get the size of the item we are placing into the overflow\n        var removedSize = breadcrumbsObj.sizeOfIndividualShortItem(strArray[pointer]);\n        // subtract the size from the overall accumulated size\n        currentAccumSize -= removedSize;\n        //and make sure to manually change our pointer.\n        pointer++;\n      }\n\n      //create the overflow object, and populate its children with the shortened strings (if necessary)\n      overflowObj.children = breadcrumbsObj.shortenedItems.slice(0, pointer);\n\n      //the last item is usually full size, but, if if it's just the overflow and the last item\n      // and the last item is too long, it should shortened.\n      lastItem  = (noRoomForFullLastItem) ? breadcrumbsObj.lastItemShort : breadcrumbsObj.lastItemFull;\n      \n      //add the overflow obj to the beginning of the array, and follow it up with all the shortened strings, \n      //starting with the point we stopped at with the pointer, and going till the last item, which is dynamically determined.\n      slicedStrArray = [overflowObj].concat(breadcrumbsObj.shortenedItems.slice(pointer, strArray.length-1)).concat(lastItem);\n      \n      return accept(slicedStrArray);\n      });\n    },\n    \n\n    /**\n     * This method is used to determine where the path click came from - we have 3 different options, \n     * 1. the text\n     * 2. the down chevron\n     * 3. The side chevron\n     * but we really want the encompossing LI, regardless of what was clicked. \n     * the two icons have a _iconsetName property that is 'fa' so we use that to determine if they were clicked, \n     * and if so, grab their parent, which is the LI.\n     * @param {*} evt the event generated by the user tap\n     */\n    _normalizePathClickTarget(evt) {\n      return (evt.target._iconsetName === 'fa') ? evt.target.parentNode.parentNode : evt.target;\n    },\n    /**\n     * This method resets the existing _selectedItem\n     */\n    _resetSelectedItem() {\n      this.set('_selectedItem', false);\n    },\n    /**\n     * This method is called on load, to calculate the initial Path, \n     * everytime a breadcrumb is clicked.\n     * it recursively builds the path, and returns it as a promise.\n     */\n    _calculatePath() {\n      return new Promise((accept, reject) => {\n        var pathArray = [],\n        currentDataObj = this.breadcrumbData,\n        self = this,\n        foundSelectedItem = false;\n        var recursiveLoopThroughObj = function(pathItem) {\n          for (var i=0, len = pathItem.length; i<len;i++) {\n            if (foundSelectedItem) {\n              break;\n            };\n\n            if (pathItem[i].selectedItem) {\n                pathArray.push(pathItem[i]);\n                foundSelectedItem = true;\n                break;\n              }\n\n            if (pathItem[i].children) {\n              //if it has children, we want to keep digging in\n              //so we push the item we are on into the pathArray\n              //and call ourselves with the children of the current item\n              pathArray.push(pathItem[i]);\n              recursiveLoopThroughObj(pathItem[i].children)\n            }\n          }\n        };\n\n        //the initial call into the recursion\n        recursiveLoopThroughObj(currentDataObj);\n\n        //once all the recursion is done, we can return the pathArray\n        return accept(pathArray);\n      });\n    },\n   \n    /**\n     * This function checks whether the item in question has children.\n     * @param {*} itemInPath \n     */\n    _doesItemHaveChildren(itemInPath) {\n      return (itemInPath && itemInPath.hasChildren);\n    },\n    /**\n     * This function is used to determine whether we are on the last Item in the array. - if \n     * the index is the last item in the aray (length -1), we return false.\n     * @param {Number} index the index of the item\n     */\n    _isLastItemInData(index) {\n      return this._mainPathItems.length-1 === index;\n    },\n    /**\n     * this method calls a reset on whatever selected Item we \n     * previously had, and calls a set on the new selectedItem, as well as calls prepareData which determines \n     * how the breadcrumbs will show up.\n     * @param {Object} evt the click event from the dropdown item clicked\n     */\n    _dropdownTap(evt) {\n      this._resetSelectedItem();\n      var newSelectItem = evt.model.item;\n      this._setSelectedItem(newSelectItem);\n      //this hides the dropdown\n      this.set('_isDropdownHidden', true);\n      this._changePathFromDropdownClick();\n      //and this clears out the field that hold the previously clicked\n      //path item.\n      this.set('_clickPathItem', {});\n      \n    },\n    /**\n     * This method calls the prepareData method, which runs through the \n     */\n    _changePathFromDropdownClick() {\n      this.prepareData();\n    },\n    /**\n     * This method sets a _selectedItem from the passed object.\n     * @param {Object} selectedItem the new selected item\n     */\n    _setSelectedItem(selectedItem) {\n      selectedItem.selectedItem = true;\n      this.set('_selectedItem', selectedItem);\n    },\n    /* on tap, we need to find out if the clicked item is the same as before.\n    * if it is, we make the dropdown go way.\n    * if it is not, we save the new clicked item.\n    */\n    _onPathTap(evt) {\n      var dataItem = evt.model.item;\n\n      // if the selected item (the one at the end of the breadcrumb) has been clicked, ignore it.\n      if (evt.model.item.selectedItem) {\n        evt.stopPropagation();\n        return;\n      }\n      //if the item that is clicked is the open option, hide the dropdown, and reset the _clickPathItem object.\n      if (this._clickPathItem === dataItem) {\n        this.set('_isDropdownHidden', true);\n        this.set('_clickPathItem', {});\n      } else {\n        //new click on new item, set the clicked item, show the dropdown and set its position.\n        this.set('_clickPathItem', dataItem);\n        this.set('_isDropdownHidden', false);\n        this._changeDropdownPosition(evt);\n      }\n      if (this._doesItemHaveChildren(dataItem)) {\n        //dataItem.children = shortenedVersion(dataItem.children)\n        this.set('_clickedItemChildren', dataItem.children);\n      }\n    },\n    /**\n     * @param {Object} positioning an object which holds the new positioning for the dropdown\n     */\n    _changeDropdownPosition(evt) {\n      var normalizedTarget = this._normalizePathClickTarget(evt),\n          targetRect = normalizedTarget.getBoundingClientRect(),\n          targetLeft = targetRect.left,\n          targetBottom = targetRect.bottom,\n          targetHeight = targetRect.height,\n          windowScrollX = window.scrollX,\n          windowScrollY = window.scrollY,\n          dropdown = Polymer.dom(this.root).querySelector('.breadCrumbdropdown');\n      \n      dropdown.style.top = (targetBottom + windowScrollY + 4) + 'px';\n      dropdown.style.left = targetLeft + windowScrollX + 'px';\n    },\n    /**\n     * This method dispatches a custom event ('px-breadcrumbs-item-clicked') that has the item attached to it.\n     * the 'composed: true' property makes it so the event passes through shadow dom boundaries.\n     * @param {*} item the item that was clicked on.\n     */\n    _notifyClick(item) {\n      this.dispatchEvent(new CustomEvent('px-breadcrumbs-item-clicked', {item: item, composed: true}));\n    }\n  });\n  \n  class Breadcrumbs {\n    constructor(breadcrumbs) {\n      this.breadcrumbs = breadcrumbs;\n      this.map = new WeakMap();\n      this.ctx = this._createCanvas();\n      this._preShortenItems(this.breadcrumbs);\n      return this;\n    }\n    _preShortenItems(items) {\n      for (let item of items) {\n        this._getShortenedText(item);\n      }\n    }\n    get sizeOfFullBreadcrumbs() {\n      this.__sizeOfFullBreadcrumbs = this.__sizeOfFullBreadcrumbs || this._calculateSizeOfBreadcrumbs(this.breadcrumbs);\n      return this.__sizeOfFullBreadcrumbs;\n    }\n    get sizeOfAllShortenedItemsExcludingLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(0, this.breadcrumbs.length-1), false);\n    }\n    get sizeOfFullLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1));\n    }\n    get sizeOfShortLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1), false);\n    }\n    get lastItemFull() {\n      return this.breadcrumbs.slice(-1)[0];\n    }\n    get lastItemShort() {\n      return this.shortenedItems.slice(-1)[0];\n    }\n    get shortenedItems() {\n      \n      this.__shortenedItems = this.__shortenedItems ||  this.breadcrumbs.map((item) => {\n        var newItem = {};\n        newItem.text = this._getShortenedText(item);\n        newItem.children = item.children;\n        newItem.selectedItem = item.selectedItem;\n        newItem.hasChildren = item.hasChildren;\n        return newItem;\n      });\n      return this.__shortenedItems;\n    }\n    get sizeOfEllipsis() {\n      return parseInt(this.ctx.measureText('...').width,10)\n    }\n    get sizeOfAllShortenedItems() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs, false);\n    }\n    get allShortenedItemsExcludingLast() {\n      return this.shortenedItems.slice(0, this.shortenedItems.length -1);\n    }\n    get sizeOfAllShortenedItems() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs, false);\n    }\n    _getShortenedText(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortText = cachedItem.shortText || `${item.text.substr(0,6)}...${item.text.substr(item.text.length-6)}`;\n      this.map.set(item, cachedItem);\n      return cachedItem.shortText;\n    }\n    _sizeOfIndividualFullItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.fullSize = (cachedItem.fullSize || parseInt(this.ctx.measureText(item.text).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.fullSize;\n    }\n    sizeOfIndividualShortItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortSize = (cachedItem.shortSize || parseInt(this.ctx.measureText(cachedItem.shortText).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.shortSize;\n    }\n    _calculateSizeOfBreadcrumbs(strArray, useFullSize=true) {\n      if (strArray) {\n        let accum = 0,\n            i = 0,\n            len = strArray.length,\n            sizeOfItem;\n\n        for (i=0; i<len;i++,sizeOfItem=null) {\n          \n          if (useFullSize) {\n            sizeOfItem = this._sizeOfIndividualFullItem(strArray[i]);\n          } else {\n            sizeOfItem = this.sizeOfIndividualShortItem(strArray[i]);\n          }\n\n          accum += sizeOfItem + 15; //the 15 is for the right angle.\n          \n          //if the item has children, we need to add the size of the down chevron.\n          if (strArray[i].children) {\n            accum += 11;\n          }\n        }\n        return accum;\n      }\n    }\n    _createCanvas() {\n      const canvas = document.createElement('canvas');\n      \n      canvas.height = 20;\n      canvas.width = 9999;\n\n      const ctx = canvas.getContext('2d');\n      ctx.font = \"15px GE Inspira Sans\";\n      return ctx;\n    }\n  }\n  \n\n})();\n"]}