{"version":3,"sources":["px-breadcrumbs.es6.js"],"names":["Polymer","is","properties","breadcrumbData","type","Array","value","_mainPathItems","_clickPathItem","Object","_clickedItemChildren","_isDropdownHidden","Boolean","_selectedItem","_ulWidth","Number","_selectedItemPath","readOnly","behaviors","IronResizableBehavior","listeners","observers","_calculatePathItemClass","pathItem","source","_calculatePath","selectedItem","graph","_set_selectedItemPath","getPathToItem","_getContainerSize","debounce","window","requestAnimationFrame","breadcrumbsContainer","dom","root","querySelector","breadcrumbsUlContainer","bcUlContainerRect","getBoundingClientRect","set","width","_rebuildBreadcrumbsDisplayOptions","itemPath","length","breadcrumbsObj","Breadcrumbs","sizeOfFullBreadcrumbs","sizeOfAllShortenedItemsExcludingLastItem","sizeOfFullLastItem","strArrayShortenedWithFullLastItem","allShortenedItemsExcludingLast","concat","lastItemFull","sizeOfAllShortenedItems","strArrayShortened","shortenedItems","_createArrayWithOverflow","strArray","pointer","currentAccumSize","sizeOfEllipsis","noRoomForFullLastItem","lastItem","overflowObj","slicedStrArray","removedSize","sizeOfIndividualShortItem","children","slice","lastItemShort","_isLastItemInData","index","console","log","_normalizePathClickTarget","evt","target","_iconsetName","parentNode","prepareData","breadcrumbsData","Graph","_addParentPropToItem","parent","i","len","newItem","text","hasChildren","_addToWeakMap","_doesItemHaveSiblings","itemInPath","isItemOverflow","hasSiblings","_dropdownTap","newSelectItem","model","item","_changePathFromClick","_onPathTap","dataItem","isClickedItemOverflow","siblings","getSiblings","_changeDropdownPosition","normalizedTarget","targetRect","targetLeft","left","targetBottom","bottom","targetHeight","height","windowScrollX","scrollX","windowScrollY","scrollY","dropdown","style","top","_notifyClick","fire","composed","breadcrumbs","map","WeakMap","ctx","_createCanvas","_preShortenItems","cachedItem","get","items","_getShortenedText","shortText","substr","fullSize","parseInt","measureText","shortSize","useFullSize","accum","sizeOfItem","_sizeOfIndividualFullItem","canvas","document","createElement","getContext","font","__sizeOfFullBreadcrumbs","_calculateSizeOfBreadcrumbs","__shortenedItems","wrapper","isTruncated","nodes","_crawlGraph","recursiveLoopThroughObj","path","metaData","call","bind","selectedItemPath","undefined"],"mappings":"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","file":"px-breadcrumbs.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-breadcrumbs', \n\n    properties: {\n      /**\n       * This array receives/holds the data that will be transformed into the breadcrumbs.\n       */\n      breadcrumbData: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _mainPathItems: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _clickPathItem: {\n        type: Object,\n        value: function() {return {};}\n      },\n      _clickedItemChildren: {\n        type: Array,\n        value: function() {return [];},\n        \n      },\n      _isDropdownHidden: {\n        type: Boolean,\n        value: true\n      },\n      _selectedItem: {\n        type: Object\n      },\n      _ulWidth: {\n        type: Number,\n        value: 0\n      },\n      _selectedItemPath: {\n        type: Array,\n        value: function() {return [];},\n        readOnly: true\n      }\n    },\n    behaviors: [Polymer.IronResizableBehavior],\n    listeners: {\n      'iron-resize': '_getContainerSize'\n    },\n    observers: [\n      '_calculatePath(_selectedItem)', \n      '_rebuildBreadcrumbsDisplayOptions(_selectedItemPath, _ulWidth)',\n      'prepareData(breadcrumbData)'\n      ],\n    _calculatePathItemClass(pathItem) {\n      //debugger;\n      pathItem = pathItem.source ? pathItem.source : pathItem;\n\n      return (this._clickPathItem === pathItem) ? 'opened': '';\n    },\n    _calculatePath(selectedItem) {\n      var graph = this.graph;\n      this._set_selectedItemPath(graph.getPathToItem(selectedItem));\n    },\n    /**\n     * This method is called on initial page load, and on every page resize\n     * to find the width of the container after a draw, and queues\n     * the display options for the breadcrumbs for the next animation frame\n     * \n     */\n    _getContainerSize() {\n      this.debounce('windowResize', () => {\n        window.requestAnimationFrame(() => {\n          var breadcrumbsContainer = Polymer.dom(this.root).querySelector('.container'),\n              breadcrumbsUlContainer = Polymer.dom(breadcrumbsContainer).querySelector('ul'),\n              bcUlContainerRect = breadcrumbsContainer.getBoundingClientRect();\n\n          this.set('_ulWidth', bcUlContainerRect.width + 4); //the 4 is for the padding (2px on each side) on the ul.\n        });\n\n       // Polymer.RenderStatus.afterNextRender(this, this._rebuildBreadcrumbsDisplayOptions);\n      },10);\n      \n    },\n    /* \n    * in this method, we decide on the display options for the breadcrumbs. \n    * we have the following options:\n    * 1. nothing needs to be shortened.\n    * 2. we can shorten all but the last one\n    * 2. we can shorten all including the last one\n    * 3. we can shorten all of them, and include the overflow at the beginning of the array. the last one is NOT shortened.\n    * @param {array} strArray an array of objects, which contains the breadcrumbs\n    */\n    _rebuildBreadcrumbsDisplayOptions() {\n\n      var itemPath = this._selectedItemPath || [],\n          graph = this.graph,\n          _ulWidth = this._ulWidth;\n\n      if (!itemPath.length || !graph || !_ulWidth) return;\n\n      var breadcrumbsObj = new Breadcrumbs(itemPath, graph);\n\n        /*\n        * option 1 \n        * we check to see if the container (which is sized automatically to fill out the page)\n        * can fit all the items in the breadcrumbs.\n        * the first option is the simpliest one - everything just fits, but if it doesn't fit...\n        */\n        if (_ulWidth > breadcrumbsObj.sizeOfFullBreadcrumbs) {\n          //everything fits, no need to shorten anything\n          this.set('_mainPathItems', itemPath);\n          return;\n        }\n\n        /*\n        * option 2\n        * we want to find out if the container can now fit all the \n        * shortened items + the last Item that wasn't shortened\n        */\n        if (_ulWidth > breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem + breadcrumbsObj.sizeOfFullLastItem) {\n          \n          let strArrayShortenedWithFullLastItem = breadcrumbsObj.allShortenedItemsExcludingLast.concat(breadcrumbsObj.lastItemFull);\n          this.set('_mainPathItems', strArrayShortenedWithFullLastItem);\n          return;\n        }\n\n        /*\n        * option 3 \n        * we check if we can fit after we've shortened all the items \n        */\n        if (_ulWidth > breadcrumbsObj.sizeOfAllShortenedItems) {\n          let strArrayShortened = breadcrumbsObj.shortenedItems;\n          \n          this.set('_mainPathItems', strArrayShortened);\n          return;\n        }\n\n        /*\n        * option 4\n        * we have to create an array with overflow.\n        * we only get to this if non of the if statements above are true.\n        */\n      \n        this.set('_mainPathItems',this._createArrayWithOverflow(itemPath, _ulWidth, breadcrumbsObj));\n\n    },\n    /*\n    * this method is called once we've established that we need to have an\n    * array with overflow.\n    * we keep removing the size of items - starting from the beginning of the array - \n    *  from the total size of all the items, until we can fit everything + the last item that isn't shortened\n    * into the container.\n    * @param {Array} strArray the array that holds the breadcrumbs\n    * @param {number} _ulWidth the width of the ul container\n    */\n    _createArrayWithOverflow(strArray, _ulWidth, breadcrumbsObj) {\n      \n      var pointer = 0,\n          currentAccumSize = breadcrumbsObj.sizeOfAllShortenedItemsExcludingLastItem,\n          sizeOfFullLastItem = breadcrumbsObj.sizeOfFullLastItem,\n          sizeOfEllipsis = breadcrumbsObj.sizeOfEllipsis,\n          noRoomForFullLastItem = false,\n          lastItem = {},\n          overflowObj = {\"text\": \"...\", \"hasChildren\": true},\n          slicedStrArray = [];\n\n      //keep looping until all the items fit into the container\n      while (_ulWidth < sizeOfEllipsis + currentAccumSize + sizeOfFullLastItem) {\n        //if we made it to the last item, and it's STILL can't fit, break out of the \n        // while loop, to ensure the last items doesn't go into the overflow object.\n        if (pointer === strArray.length-1) {\n          noRoomForFullLastItem = true;\n          break\n        }\n        //get the size of the item we are placing into the overflow\n        var removedSize = breadcrumbsObj.sizeOfIndividualShortItem(strArray[pointer]);\n        // subtract the size from the overall accumulated size\n        currentAccumSize -= removedSize;\n        //and make sure to manually change our pointer.\n        pointer++;\n      }\n      \n      \n\n      //create the overflow object, and populate its children with the shortened strings (if necessary)\n      overflowObj.children = strArray.slice(0, pointer);\n\n      //the last item is usually full size, but, if if it's just the overflow and the last item\n      // and the last item is too long, it should shortened.\n      lastItem  = (noRoomForFullLastItem) ? breadcrumbsObj.lastItemShort : breadcrumbsObj.lastItemFull;\n      \n      //add the overflow obj to the beginning of the array, and follow it up with all the shortened strings, \n      //starting with the point we stopped at with the pointer, and going till the last item, which is dynamically determined.\n      slicedStrArray = [overflowObj].concat(breadcrumbsObj.shortenedItems.slice(pointer, strArray.length-1)).concat(lastItem);\n      \n      return slicedStrArray;\n\n    },\n    /**\n     * This function is used to determine whether we are on the last Item in the array. - if \n     * the index equalsthe last item in the aray (length -1), we return false.\n     * @param {Number} index the index of the item\n     */\n    _isLastItemInData(index) {\n      console.log('this._mainPathItems.length-1 = ', this._mainPathItems.length-1);\n      console.log('index = ' + index);\n      console.log(this._mainPathItems.length-1 === index);\n      return this._mainPathItems.length-1 === index;\n    },\n\n    /**\n     * This method is used to determine where the path click came from - we have 3 different options, \n     * 1. the text\n     * 2. the down chevron\n     * 3. The side chevron\n     * but we really want the encompossing LI, regardless of what was clicked. \n     * the two icons have a _iconsetName property that is 'fa' so we use that to determine if they were clicked, \n     * and if so, grab their parent, which is the LI.\n     * @param {*} evt the event generated by the user tap\n     */\n    _normalizePathClickTarget(evt) {\n      return (evt.target._iconsetName === 'fa') ? evt.target.parentNode.parentNode : evt.target;\n    },\n    /**\n     *  \n     * \n     * \n     */\n    prepareData(breadcrumbsData) {\n        if (!breadcrumbsData.length) return;\n\n        var graph = new Graph(this.breadcrumbData, this);\n        \n        this.set('graph', graph);\n        this.set('_selectedItem', graph.selectedItem);\n    },\n    _addParentPropToItem(parent) {\n      var i=0,\n          children = parent.children,\n          len = children.length,\n          breadcrumbsObj = this.breadcrumbsObj;\n\n      for (; i<len;i++) {\n        var newItem = {};\n        newItem.children = children[i].children;\n        newItem.text = children[i].text;\n        newItem.hasChildren = children[i].hasChildren;\n        newItem.selectedItem = children[i].selectedItem;\n        newItem.parent = parent;\n\n        breadcrumbsObj._addToWeakMap = newItem;\n      }\n    },\n    /**\n     * This function checks whether the item in question has siblings.\n     * @param {*} itemInPath \n     */\n    _doesItemHaveSiblings(itemInPath) {\n      \n      var graph = this.graph,\n          source = itemInPath.source ? itemInPath.source : itemInPath,\n          isItemOverflow = itemInPath.text === '...' ? true : false;\n\n      return (!isItemOverflow)  ? graph.hasSiblings(source) : false;\n    },\n    /**\n     * this method calls a reset on whatever selected Item we \n     * previously had, and calls a set on the new selectedItem, as well as calls prepareData which determines \n     * how the breadcrumbs will show up.\n     * @param {Object} evt the click event from the dropdown item clicked\n     */\n    _dropdownTap(evt) {\n      var newSelectItem = evt.model.item.source ? evt.model.item.source : evt.model.item;\n      //this._setSelectedItem(newSelectItem);\n      //this hides the dropdown\n      this.set('_isDropdownHidden', true);\n      this._changePathFromClick(newSelectItem);\n      //and this clears out the field that hold the previously clicked\n      //path item.\n      this.set('_clickPathItem', {});\n      \n    },\n    /**\n     * This method calls the prepareData method, which runs through the \n     */\n    _changePathFromClick(item) {\n      this.set('_selectedItem', item);\n      \n    },\n    /* on tap, we need to find out if the clicked item is the same as before.\n    * if it is, we make the dropdown go way.\n    * if it is not, we save the new clicked item.\n    */\n    _onPathTap(evt) {\n      var dataItem = evt.model.item.source ? evt.model.item.source : evt.model.item;\n\n      //if the item that is clicked is the open option, hide the dropdown, and reset the _clickPathItem object.\n      if (this._clickPathItem === dataItem) {\n        this.set('_isDropdownHidden', true);\n        this.set('_clickPathItem', {});\n        return;\n      }\n\n      var isClickedItemOverflow = dataItem.text ==='...' ? true : false;\n\n      if (this._doesItemHaveSiblings(dataItem) || isClickedItemOverflow) {\n        var graph = this.graph,\n            siblings = !isClickedItemOverflow ? graph.getSiblings(dataItem) : dataItem.children;\n        \n        this.set('_clickedItemChildren', siblings);\n        this.set('_clickPathItem', dataItem);\n        this.set('_isDropdownHidden', false);\n        this._changeDropdownPosition(evt);\n\n      } else {\n        this.set('_clickedItemChildren', []);\n        this._changePathFromClick(dataItem);\n      }\n    },\n    /**\n     * @param {Object} positioning an object which holds the new positioning for the dropdown\n     */\n    _changeDropdownPosition(evt) {\n      var normalizedTarget = this._normalizePathClickTarget(evt),\n          targetRect = normalizedTarget.getBoundingClientRect(),\n          targetLeft = targetRect.left,\n          targetBottom = targetRect.bottom,\n          targetHeight = targetRect.height,\n          windowScrollX = window.scrollX,\n          windowScrollY = window.scrollY,\n          dropdown = Polymer.dom(this.root).querySelector('.breadCrumbdropdown');\n      \n      dropdown.style.top = (targetBottom + windowScrollY) + 'px';\n      dropdown.style.left = targetLeft + windowScrollX + 'px';\n    },\n    /**\n     * This method dispatches a custom event ('px-breadcrumbs-item-clicked') that has the item attached to it.\n     * the 'composed: true' property makes it so the event passes through shadow dom boundaries.\n     * @param {*} item the item that was clicked on.\n     */\n    _notifyClick(item) {\n      this.fire('px-breadcrumbs-item-clicked', {item: item, composed: true});\n    },\n    \n  });\n  \n  class Breadcrumbs {\n    constructor(breadcrumbs = [], graph) {\n      this.graph = graph;\n      this.breadcrumbs = breadcrumbs;\n      this.map = new WeakMap();\n      this.ctx = this._createCanvas();\n      this._preShortenItems(this.breadcrumbs);\n      return this;\n    }\n    \n    get sizeOfFullBreadcrumbs() {\n      this.__sizeOfFullBreadcrumbs = this.__sizeOfFullBreadcrumbs || this._calculateSizeOfBreadcrumbs(this.breadcrumbs);\n      return this.__sizeOfFullBreadcrumbs;\n    }\n    get sizeOfAllShortenedItemsExcludingLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(0, this.breadcrumbs.length-1), false);\n    }\n    get sizeOfFullLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1));\n    }\n    get sizeOfShortLastItem() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs.slice(-1), false);\n    }\n    get lastItemFull() {\n      return this.breadcrumbs.slice(-1)[0];\n    }\n    get lastItemShort() {\n      return this.shortenedItems.slice(-1)[0];\n    }\n    get shortenedItems() {\n      this.__shortenedItems = this.__shortenedItems ||  this.breadcrumbs.map((item) => {\n        var wrapper = {};\n        wrapper.source = item;\n        wrapper.isTruncated = true;\n        wrapper.text = this._getShortenedText(item);\n        wrapper.children = item.children;\n        wrapper.selectedItem = item.selectedItem;\n        wrapper.hasChildren = item.hasChildren;\n        return wrapper;\n      });\n      return this.__shortenedItems;\n    }\n    get sizeOfEllipsis() {\n      return parseInt(this.ctx.measureText('...').width,10)\n    }\n    get sizeOfAllShortenedItems() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs, false);\n    }\n    get allShortenedItemsExcludingLast() {\n      return this.shortenedItems.slice(0, this.shortenedItems.length -1);\n    }\n    get sizeOfAllShortenedItems() {\n      return this._calculateSizeOfBreadcrumbs(this.breadcrumbs, false);\n    }\n\n    _addToWeakMap(item) {\n      const cachedItem = this.map.get(item) || null;\n      if (!cachedItem) {\n        this.map.set(item, item);  \n      }\n    }\n    _preShortenItems(items) {\n      for (let item of items) {\n        this._getShortenedText(item);\n      }\n    }\n    _getShortenedText(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortText = cachedItem.shortText || `${item.text.substr(0,6)}...${item.text.substr(item.text.length-6)}`;\n      this.map.set(item, cachedItem);\n      return cachedItem.shortText;\n    }\n    _sizeOfIndividualFullItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.fullSize = (cachedItem.fullSize || parseInt(this.ctx.measureText(item.text).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.fullSize;\n    }\n    sizeOfIndividualShortItem(item) {\n      const cachedItem = this.map.get(item) || {};\n      cachedItem.shortSize = (cachedItem.shortSize || parseInt(this.ctx.measureText(cachedItem.shortText).width,10));\n      this.map.set(item, cachedItem);\n      return cachedItem.shortSize;\n    }\n    _calculateSizeOfBreadcrumbs(strArray, useFullSize=true) {\n      if (strArray) {\n        let accum = 0,\n            i = 0,\n            len = strArray.length,\n            sizeOfItem;\n\n        for (i=0; i<len;i++,sizeOfItem=null) {\n          \n          if (useFullSize) {\n            sizeOfItem = this._sizeOfIndividualFullItem(strArray[i]);\n          } else {\n            sizeOfItem = this.sizeOfIndividualShortItem(strArray[i]);\n          }\n          var source = strArray[i].source ? strArray[i].source : strArray[i];\n          accum += sizeOfItem + 15; //the 15 is for the right angle.\n          //if the item has siblings, we need to add the size of the down chevron.\n          if (strArray[i].text !== \"...\" && this.graph.hasSiblings(source)) {\n            accum += 11;\n          }\n        }\n        return accum;\n      }\n    }\n    _createCanvas() {\n      const canvas = document.createElement('canvas');\n      \n      canvas.height = 20;\n      canvas.width = 9999;\n\n      const ctx = canvas.getContext('2d');\n      ctx.font = \"15px GE Inspira Sans\";\n      return ctx;\n    }\n  };\n  \n  class Graph {\n    constructor(nodes) {\n      this.map = new WeakMap();\n      this._selectedItem = null;\n      this.graph = this._crawlGraph(nodes);\n      this.nodes = nodes;\n      return this;\n    }\n    _crawlGraph(nodes) {\n      \n      var recursiveLoopThroughObj = function(nodes, parent, path=[]) {\n          for (var i=0, len = nodes.length; i<len;i++) {\n          var metaData = {},\n            itemPath;\n\n            if (parent) {\n              metaData.parent = parent;\n            }\n            \n            if (nodes.length >1) {\n              metaData.siblings = nodes;\n            }\n                        \n            itemPath = path.concat([nodes[i]]);\n            \n            if (nodes[i].children) {\n              //if it has children, we want to keep digging in\n              //so we push the item we are on into the pathArray\n              //and call ourselves with the children of the current item\n              metaData.children = nodes[i].children;\n              \n\n              recursiveLoopThroughObj.call(this,nodes[i].children, nodes[i], itemPath);\n            }\n\n            metaData.path = itemPath;\n            \n            if (nodes[i].selectedItem) {\n              this._selectedItem = nodes[i];\n\n              //add the parent and the selected item itself to the path\n              //metaData.path = path.concat(parent);\n            }\n            this.map.set(nodes[i], metaData);\n          }\n\n        }.bind(this);\n\n        //the initial call into the recursion\n        recursiveLoopThroughObj(nodes);\n    }\n    get selectedItem() {\n      return this._selectedItem;\n    }\n    get selectedItemPath() {\n      \n      var metaData = this.map.get(this._selectedItem);\n      return (metaData) ? metaData.path : undefined;\n    }\n    handleSelectedItem(item) {\n      this.selectedItem = item;\n      return this.selectedItemPath;\n    }\n    getPathToItem(item) {\n      var metaData = this.map.get(item);\n      return metaData.path;\n    }\n    hasSiblings(item) {\n      var siblings = this.map.get(item).siblings;\n      return siblings && siblings.length >1;\n    }\n    getSiblings(item) {\n      var siblings = this.map.get(item).siblings;\n      return siblings;\n    }\n    set selectedItem(item) {\n      if (item) {\n        this._selectedItem.selectedItem = false;\n      item.selectedItem = true;\n      this._selectedItem = item;\n      }\n    }\n  }\n})();\n"]}