{"version":3,"sources":["px-breadcrumbs.es6.js"],"names":["Polymer","is","properties","breadcrumbData","type","Array","value","_mainPathItems","_clickPathItem","Object","_clickedItemChildren","_isDropdownHidden","Boolean","_selectedItem","observers","prepareData","_calculatePath","then","obj","_fixLongAssetNames","pathArray","set","_isTextShorteningNecessery","console","log","Promise","accept","reject","i","len","length","text","_returnShortenString","path","shortenedString","children","pathItem","string","beginning","substring","middle","end","_normalizePathClickTarget","evt","target","_iconsetName","parentNode","_resetSelectedItem","selectedItem","fulfill","currentDataObj","self","foundSelectedItem","recursiveLoopThroughObj","push","_doesItemHaveChildren","itemInPath","hasChildren","_isNotLastItemInData","index","_calculatePathclass","_dropdownTap","newSelectItem","model","item","_setSelectedItem","_onPathTap","dataItem","stopPropagation","_changeDropdownPosition","extractClickedPathItemPosition","clickedItem","normalizedTarget","targetRect","getBoundingClientRect","targetLeft","left","targetBottom","bottom","targetHeight","height","windowScrollX","window","scrollX","windowScrollY","scrollY","dropdown","dom","root","querySelector","style","top","_notifyClick","dispatchEvent","CustomEvent","composed"],"mappings":"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","file":"px-breadcrumbs.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-breadcrumbs', \n\n    properties: {\n      /**\n       * This array receives/holds the data that will be transformed into the breadcrumbs.\n       */\n      breadcrumbData: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _mainPathItems: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _clickPathItem: {\n        type: Object,\n        value: function() {return {};}\n      },\n      _clickedItemChildren: {\n        type: Array,\n        value: function() {return [];},\n        \n      },\n      _isDropdownHidden: {\n        type: Boolean,\n        value: true\n      },\n      _selectedItem: {\n        type: Object,\n        value: function() {return {};}\n      }\n    },\n    observers: ['prepareData(breadcrumbData.*, _selectedItem)'],\n    /**\n     * This method has a chain of promises that process the data as needed.\n     */\n    prepareData() {\n      this._calculatePath()\n      //check if we need to shorten anything\n      //.then((path) => this._isTextShorteningNecessery(path))\n      .then((obj) => this._fixLongAssetNames(obj))\n      .then((pathArray) => {\n        this.set('_mainPathItems', pathArray);\n      });\n    },\n    _isTextShorteningNecessery(pathArray) {\n      console.log('pathArray');\n      console.log(pathArray);\n    },\n    /**\n     * This method accepts the path array, and loops through it recursively\n     * looking for anything with more than 16 characters.\n     * \n     * once it finds a long asset name, it shortens it.\n     * @param {Object} pathArray \n     * @return {Promise} PathArray \n     */\n    _fixLongAssetNames(pathArray) {\n      //var pathArray = obj.pathArray;\n      return new Promise((accept, reject) => {\n        //loop through each item\n        for (var i=0, len = pathArray.length; i<len;i++) {\n        //looking for anything that's over 16 characters.\n        if (pathArray[i].text.length > 16) {\n          //get the shotened version of the text\n          this._returnShortenString(pathArray[i])\n          .then((obj) => {\n            //and save it into the correct path.\n            var path = obj.path,\n                shortenedString = obj.text;\n            path.text = shortenedString;\n          });\n          \n        }\n        //make sure to search through the children as well by calling this recursively\n        if (pathArray[i].children) {\n          this._fixLongAssetNames(pathArray[i].children);\n        }\n      }\n      //once we're done, return the promise with the modified pathArray\n      return accept(pathArray);\n      });\n      \n    },\n    /**\n     * This method accepts an obj that has more than 16 characters in its text, and \n     * returns the shortened version of that text.\n     * @param {Obj} pathItem \n     * @return {Promise} shortenedString\n     */\n    _returnShortenString(pathItem) {\n      return new Promise((accept, reject) => {\n        var string = pathItem.text,\n        beginning = string.substring(0,6),\n        middle = \"...\",\n        end = string.substring(string.length-6);\n      \n        return accept({\"text\": beginning + middle + end, \"path\": pathItem});\n      });\n      \n    },\n    /**\n     * This method is used to determine where the path click came from - we have 3 different options, \n     * 1. the text\n     * 2. the down chevron\n     * 3. The side chevron\n     * but we really want the encompossing LI, regardless of what was clicked. \n     * the two icons have a _iconsetName property that is 'fa' so we use that to determine if they were clicked, \n     * and if so, grab their parent, which is the LI.\n     * @param {*} evt the event generated by the user tap\n     */\n    _normalizePathClickTarget(evt) {\n      return (evt.target._iconsetName === 'fa') ? evt.target.parentNode.parentNode : evt.target;\n    },\n    /**\n     * This method resets the existing _selectedItem\n     */\n    _resetSelectedItem() {\n      this._selectedItem.selectedItem = false;\n    },\n    /**\n     * This method is called on load, to calculate the initial Path, \n     * everytime a breadcrumb is clicked.\n     * it recursively builds the path, while looking for the \n     * selectedItem.\n     */\n    _calculatePath() {\n      return new Promise((fulfill, reject) => {\n        var pathArray = [],\n        currentDataObj = this.breadcrumbData,\n        self = this,\n        foundSelectedItem = false;\n        var recursiveLoopThroughObj = function(pathItem) {\n          for (var i=0, len = pathItem.length; i<len;i++) {\n            if (foundSelectedItem) {\n              break;\n            };\n\n            if (pathItem[i].selectedItem) {\n                pathArray.push(pathItem[i]);\n                self.set('_selectedItem', pathItem[i]);\n                foundSelectedItem = true;\n                break;\n              }\n\n            if (pathItem[i].children) {\n              //if it has children, we want to keep digging in\n              //so we push the item we are on into the pathArray\n              //and call ourselves with the children of the current item\n              pathArray.push(pathItem[i]);\n              recursiveLoopThroughObj(pathItem[i].children)\n            }\n          }\n        };\n\n        //the initial call into the recursion\n        recursiveLoopThroughObj(currentDataObj);\n\n        //once all the recursion is done, we can set the value of \n        //_mainPathItems\n        return fulfill(pathArray);\n      });\n    },\n   \n    /**\n     * This function checks whether the item in question has children.\n     * @param {*} itemInPath \n     */\n    _doesItemHaveChildren(itemInPath) {\n      return itemInPath.hasChildren;\n    },\n    /**\n     * This function is used to determine whether we are on the last Item in the array. - if \n     * the index is the last item in the aray (length -1), we return false.\n     * @param {*} index \n     */\n    _isNotLastItemInData(index) {\n      return this._mainPathItems.length-1 !== index;\n    },\n    /**\n     * This function is used to determine the correct classes that need to be passed in - if \n     * the index is the last item in the aray, we want it to be bold, so we pass the selected class.\n     * \n     * @param {*} index This represents the index of the item we are looking at in the array.\n     */\n    _calculatePathclass(index) {\n      return !this._isNotLastItemInData(index) ?  ' selected' : '';\n    },\n    /**\n     * this method call a reset on whatever selected Item we \n     * previously had, and call a set on the new selectedItem \n     * @param {*} evt the click event from the dropdown item clicked\n     */\n    _dropdownTap(evt) {\n      this._resetSelectedItem();\n      console.log(evt);\n      var newSelectItem = evt.model.item;\n      this._setSelectedItem(newSelectItem);\n      //this hides the dropdown\n      this.set('_isDropdownHidden', true);\n      //and this clears out the field that hold the previously clicked\n      //path item.\n      this.set('_clickPathItem', {});\n    },\n    /**\n     * This method sets a _selectedItem set from the passed object.\n     * @param {Object} selectedItem the new selected item\n     */\n    _setSelectedItem(selectedItem) {\n      selectedItem.selectedItem = true;\n      this.set('_selectedItem', selectedItem);\n      console.log(selectedItem);\n    },\n    _onPathTap(evt) {\n      console.log('path click');\n      var dataItem = evt.model.item;\n      /* on tap, we need to find out if the clicked item is the same as before.\n      * if it is, we make the dropdown go way.\n      * if it is not, we save the new clicked item.\n      */\n\n      // if the selected item (the one at the end of the breadcrumb) has been clicked, ignore it.\n      if (evt.model.item.selectedItem) {\n        evt.stopPropagation();\n        return;\n      }\n      if (this._clickPathItem === dataItem) {\n        console.log('this._clickPathItem === evt.model.item');\n        this.set('_isDropdownHidden', true);\n        this.set('_clickPathItem', {});\n      } else {\n        console.log('else');\n        this.set('_clickPathItem', dataItem);\n        this.set('_isDropdownHidden', false);\n        this._changeDropdownPosition(evt);\n      }\n      // 1. Check if there are children. \n\n      if (this._doesItemHaveChildren(dataItem)) {\n        this.set('_clickedItemChildren', dataItem.children);\n      }\n      \n      \n        // a. If there are kids, we need to update clickedItemChildren. \n        // b. If not, we fire an event that the clicked on item is the selected context.\n      // 2. If there are children, we need to find the left/top/height of the clicked item, and calculate the positioning of the dropdown accordingly \n    },\n    \n    /**\n     * \n     * @param {Object} clickedItem the clicked item\n     * @return Object that holds the calculated top/left for the dropdown.\n     */\n    extractClickedPathItemPosition(clickedItem) {\n      //TODO extract top/left/height from clickedItem.\n      // then, calculate the new positioning, and save it into an object.\n      // returns an object that holds the new top/left positioning.\n    },\n    /**\n     * \n     * @param {Object} positioning an object which holds the new positioning for the dropdown\n     */\n    _changeDropdownPosition(evt) {\n      var normalizedTarget = this._normalizePathClickTarget(evt),\n          targetRect = normalizedTarget.getBoundingClientRect(),\n          targetLeft = targetRect.left,\n          targetBottom = targetRect.bottom,\n          targetHeight = targetRect.height,\n          windowScrollX = window.scrollX,\n          windowScrollY = window.scrollY,\n          dropdown = Polymer.dom(this.root).querySelector('.breadCrumbdropdown');\n      console.log(targetRect);\n      dropdown.style.top = (targetBottom + windowScrollY + 4) + 'px';\n      dropdown.style.left = targetLeft + windowScrollX + 'px';\n      \n    },\n    /**\n     * This method dispatches a custom event ('px-breadcrumbs-item-clicked') that has the item attached to it.\n     * the 'composed: true' property makes it so the event passes through shadow dom boundaries.\n     * @param {*} item the item that was clicked on.\n     */\n    _notifyClick(item) {\n      //TODO fire an event with the clicked on item.\n      this.dispatchEvent(new CustomEvent('px-breadcrumbs-item-clicked', {item: item, composed: true}));\n    }\n  });\n})();\n"]}