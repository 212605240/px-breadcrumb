{"version":3,"sources":["px-breadcrumbs.es6.js"],"names":["Polymer","is","properties","breadcrumbData","type","Array","value","_mainPathItems","_clickPathItem","Object","_clickedItemChildren","_isDropdownHidden","Boolean","_selectedItem","attached","prepareData","observers","_calculatePath","then","pathArray","_breadcrumbsDisplayOptions","set","_calculateSizeOfBreadcrumbs","strArray","accumulativeSizeOfBreadcrumbs","ctx","_createCanvas","i","length","parseInt","measureText","text","width","children","Promise","accept","reject","accumulativeSizeOfAllBreadcrumbs","dom","flush","async","breadcrumbs","document","querySelector","breadcrumbsContainer","root","breadcrumbsUlContainer","bcUlContainerRect","getBoundingClientRect","ulWidth","allButTheLastItem","_shortenLongAssetNames","slice","sizeOfAllButLastItem","lastItem","shortenAllItems","sizeOfAllShortenedItem","shortenAllItemsWithOverflow","overflowArray","stArray","push","shift","overflowObj","unshift","console","log","canvas","createElement","height","_measurementCanvas","getContext","font","_isTextShorteningNecessery","len","_returnShortenString","obj","path","shortenedString","pathItem","string","beginning","substring","middle","end","_normalizePathClickTarget","evt","target","_iconsetName","parentNode","_resetSelectedItem","selectedItem","fulfill","currentDataObj","self","foundSelectedItem","recursiveLoopThroughObj","_doesItemHaveChildren","itemInPath","hasChildren","_isNotLastItemInData","index","_calculatePathclass","_dropdownTap","newSelectItem","model","item","_setSelectedItem","_onPathTap","dataItem","stopPropagation","_changeDropdownPosition","extractClickedPathItemPosition","clickedItem","normalizedTarget","targetRect","targetLeft","left","targetBottom","bottom","targetHeight","windowScrollX","window","scrollX","windowScrollY","scrollY","dropdown","style","top","_notifyClick","dispatchEvent","CustomEvent","composed"],"mappings":"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","file":"px-breadcrumbs.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-breadcrumbs', \n\n    properties: {\n      /**\n       * This array receives/holds the data that will be transformed into the breadcrumbs.\n       */\n      breadcrumbData: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _mainPathItems: {\n        type: Array,\n        value: function() {return [];}\n      },\n      _clickPathItem: {\n        type: Object,\n        value: function() {return {};}\n      },\n      _clickedItemChildren: {\n        type: Array,\n        value: function() {return [];},\n        \n      },\n      _isDropdownHidden: {\n        type: Boolean,\n        value: true\n      },\n      _selectedItem: {\n        type: Object,\n        value: function() {return {};}\n      }\n    },\n    attached() {\n      this.prepareData();\n    },\n    observers: ['prepareData(_selectedItem)'],\n    /**\n     * This method has a chain of promises that process the data as needed.\n     */\n    prepareData() {\n      this._calculatePath()\n      .then((pathArray) => this._breadcrumbsDisplayOptions(pathArray))\n      .then((pathArray) => {\n        this.set('_mainPathItems', pathArray);\n      });\n    },\n    _calculateSizeOfBreadcrumbs(strArray) {\n      \n      if (strArray) {\n        var accumulativeSizeOfBreadcrumbs = 0,\n        ctx = this._createCanvas();\n        for (var i=0; i<strArray.length;i++) {\n          accumulativeSizeOfBreadcrumbs += parseInt(ctx.measureText(strArray[i].text).width,10);\n          //if the item has children, we need to the size of the down chevron.\n          if (strArray[i].children) {\n            accumulativeSizeOfBreadcrumbs += 11;\n          }\n          //we need to also add 15 pixels for the angle right\n          if (i !==strArray.length -1) {\n            accumulativeSizeOfBreadcrumbs += 15;\n          }\n        }\n        return accumulativeSizeOfBreadcrumbs;\n      } else {\n        return [];\n      }\n    },\n    /* \n    * in this method, we decide on the display options for the breadcrumbs. \n    * we have the following options:\n    * 1. we can shorten all but the last one, and see if they fit\n    * 2. we can shorten all including the last one and see if they fit\n    * 3. we can shorten all of them, and include the overflow at the beginning of the array.\n    * @param {array} strArray an array of objects, which contains the breadcrumbs\n    */\n    _breadcrumbsDisplayOptions(strArray) {\n      return new Promise((accept, reject) => {\n        var ctx = this._createCanvas(),\n          accumulativeSizeOfAllBreadcrumbs = this._calculateSizeOfBreadcrumbs(strArray);\n          Polymer.dom.flush();\n          this.async(() => {\n            var breadcrumbs = document.querySelector('px-breadcrumbs'),\n                breadcrumbsContainer = Polymer.dom(breadcrumbs.root).querySelector('.container'),\n                breadcrumbsUlContainer = Polymer.dom(breadcrumbsContainer).querySelector('ul'),\n                bcUlContainerRect = breadcrumbsContainer.getBoundingClientRect(),\n                ulWidth = bcUlContainerRect.width;\n                \n            // we check to see if the container (which is sized automatically to fill out the page)\n            // can fit all the items in the breadcrumbs.\n            if (ulWidth < accumulativeSizeOfAllBreadcrumbs) {\n              \n              var allButTheLastItem = this._shortenLongAssetNames(strArray.slice(0, strArray.length-1)),\n                  sizeOfAllButLastItem = this._calculateSizeOfBreadcrumbs(allButTheLastItem),\n                  lastItem = this._calculateSizeOfBreadcrumbs([strArray.slice(-1)]);\n              \n              //we want to find out if the container can now fit all of the shortened items + the last Item, that wasn't shortened\n              if (ulWidth < sizeOfAllButLastItem + lastItem) {\n                //it doesn't fit, so, we go to second option.\n                var shortenAllItems = this._shortenLongAssetNames(strArray),\n                    sizeOfAllShortenedItem = this._calculateSizeOfBreadcrumbs(shortenAllItems);\n                \n                //we check if we can fit after we've shortened all the items\n                if (ulWidth < shortenAllItems) {\n                  //looks like we can't fit them, even after shortening them all. \n                  //time for option 3.\n                  //i'm setting a random high number to start with\n                  var shortenAllItemsWithOverflow = 99999,\n                      overflowArray =stArray;\n                  //keep looping until all the items fit into the container\n                  while (ulWidth < shortenAllItemsWithOverflow) {\n                    //we remove the first item - mutating strArray, and returning the item\n                    //which then gets pushed into overflowArray, giving us an array of the items we\n                    //had to cut out once this loop is done.\n                    overflowArray.push(strArray.shift());\n                    shortenAllItemsWithOverflow = this._calculateSizeOfBreadcrumbs(strArray);\n                  }\n                  var overflowObj = {\n                    \"text\": \"...\",\n                    \"children\": overflowArray\n                  }\n                  //this pushes the overflowObj to the beginning of the array.\n                  strArray.unshift(overflowObj);\n                  return accept(strArray);\n                } else {\n                  //we can fit all the breadcrumbs once we've shortened them.\n                  return accept(shortenAllItems);\n                }\n              } else {\n                //shortening everything but the last one works, so we \n                //re-add the last item - unshortened - to the array , and return that.\n                var lastItem = strArray.slice(strArray.length-1);\n                if (allButTheLastItem) {\n                  allButTheLastItem.push(lastItem[0]);\n                }\n                return accept(allButTheLastItem);\n              }\n            } else {\n              //everything fits, no need to shorten anything\n              console.log('everything fits off the bat');\n              return accept(strArray);\n            }\n          }, 1500);\n          \n      });\n    },\n    _createCanvas() {\n      var canvas = document.createElement('canvas');\n      canvas.height = 20;\n      canvas.width = 9999;\n      this._measurementCanvas = canvas;\n      var ctx = this._measurementCanvas.getContext('2d');\n      ctx.font = \"15px GE Inspira Sans\";\n      return ctx;\n    },\n    _isTextShorteningNecessery(pathArray) {\n      console.log('pathArray');\n      console.log(pathArray);\n    },\n    /**\n     * This method accepts the path array, and loops through it recursively\n     * looking for anything with more than 16 characters.\n     * \n     * once it finds a long asset name, it shortens it.\n     * @param {Object} pathArray \n     * @return {Promise} PathArray \n     */\n    _shortenLongAssetNames(pathArray) {\n        //loop through each item\n        for (var i=0, len = pathArray.length; i<len;i++) {\n          //looking for anything that's over 16 characters.\n          if (pathArray[i].text.length > 16) {\n            //get the shotened version of the text\n            this._returnShortenString(pathArray[i])\n            .then((obj) => {\n              //and save it into the correct path.\n              var path = obj.path,\n                  shortenedString = obj.text;\n              path.text = shortenedString;\n            });\n        } else {\n          //make sure to search through the children as well by calling this recursively\n          if (pathArray[i].children) {\n            this._shortenLongAssetNames(pathArray[i].children);\n          }\n          //once we're done, return the promise with the modified pathArray\n          return pathArray;\n        }\n      }\n    },\n    /**\n     * This method accepts an obj that has more than 16 characters in its text, and \n     * returns the shortened version of that text.\n     * @param {Obj} pathItem \n     * @return {Promise} shortenedString\n     */\n    _returnShortenString(pathItem) {\n      return new Promise((accept, reject) => {\n        var string = pathItem.text,\n        beginning = string.substring(0,6),\n        middle = \"...\",\n        end = string.substring(string.length-6);\n      \n        return accept({\"text\": beginning + middle + end, \"path\": pathItem});\n      });\n      \n    },\n    /**\n     * This method is used to determine where the path click came from - we have 3 different options, \n     * 1. the text\n     * 2. the down chevron\n     * 3. The side chevron\n     * but we really want the encompossing LI, regardless of what was clicked. \n     * the two icons have a _iconsetName property that is 'fa' so we use that to determine if they were clicked, \n     * and if so, grab their parent, which is the LI.\n     * @param {*} evt the event generated by the user tap\n     */\n    _normalizePathClickTarget(evt) {\n      return (evt.target._iconsetName === 'fa') ? evt.target.parentNode.parentNode : evt.target;\n    },\n    /**\n     * This method resets the existing _selectedItem\n     */\n    _resetSelectedItem() {\n      this._selectedItem.selectedItem = false;\n    },\n    /**\n     * This method is called on load, to calculate the initial Path, \n     * everytime a breadcrumb is clicked.\n     * it recursively builds the path, while looking for the \n     * selectedItem.\n     */\n    _calculatePath() {\n      return new Promise((fulfill, reject) => {\n        var pathArray = [],\n        currentDataObj = this.breadcrumbData,\n        self = this,\n        foundSelectedItem = false;\n        var recursiveLoopThroughObj = function(pathItem) {\n          for (var i=0, len = pathItem.length; i<len;i++) {\n            if (foundSelectedItem) {\n              break;\n            };\n\n            if (pathItem[i].selectedItem) {\n                pathArray.push(pathItem[i]);\n                self.set('_selectedItem', pathItem[i]);\n                foundSelectedItem = true;\n                break;\n              }\n\n            if (pathItem[i].children) {\n              //if it has children, we want to keep digging in\n              //so we push the item we are on into the pathArray\n              //and call ourselves with the children of the current item\n              pathArray.push(pathItem[i]);\n              recursiveLoopThroughObj(pathItem[i].children)\n            }\n          }\n        };\n\n        //the initial call into the recursion\n        recursiveLoopThroughObj(currentDataObj);\n\n        //once all the recursion is done, we can set the value of \n        //_mainPathItems\n        return fulfill(pathArray);\n      });\n    },\n   \n    /**\n     * This function checks whether the item in question has children.\n     * @param {*} itemInPath \n     */\n    _doesItemHaveChildren(itemInPath) {\n      return itemInPath.hasChildren;\n    },\n    /**\n     * This function is used to determine whether we are on the last Item in the array. - if \n     * the index is the last item in the aray (length -1), we return false.\n     * @param {*} index \n     */\n    _isNotLastItemInData(index) {\n      return this._mainPathItems.length-1 !== index;\n    },\n    /**\n     * This function is used to determine the correct classes that need to be passed in - if \n     * the index is the last item in the aray, we want it to be bold, so we pass the selected class.\n     * \n     * @param {*} index This represents the index of the item we are looking at in the array.\n     */\n    _calculatePathclass(index) {\n      return !this._isNotLastItemInData(index) ?  ' selected' : '';\n    },\n    /**\n     * this method call a reset on whatever selected Item we \n     * previously had, and call a set on the new selectedItem \n     * @param {*} evt the click event from the dropdown item clicked\n     */\n    _dropdownTap(evt) {\n      this._resetSelectedItem();\n      console.log(evt);\n      var newSelectItem = evt.model.item;\n      this._setSelectedItem(newSelectItem);\n      //this hides the dropdown\n      this.set('_isDropdownHidden', true);\n      //and this clears out the field that hold the previously clicked\n      //path item.\n      this.set('_clickPathItem', {});\n    },\n    /**\n     * This method sets a _selectedItem set from the passed object.\n     * @param {Object} selectedItem the new selected item\n     */\n    _setSelectedItem(selectedItem) {\n      selectedItem.selectedItem = true;\n      this.set('_selectedItem', selectedItem);\n      console.log(selectedItem);\n    },\n    _onPathTap(evt) {\n      console.log('path click');\n      var dataItem = evt.model.item;\n      /* on tap, we need to find out if the clicked item is the same as before.\n      * if it is, we make the dropdown go way.\n      * if it is not, we save the new clicked item.\n      */\n\n      // if the selected item (the one at the end of the breadcrumb) has been clicked, ignore it.\n      if (evt.model.item.selectedItem) {\n        evt.stopPropagation();\n        return;\n      }\n      if (this._clickPathItem === dataItem) {\n        console.log('this._clickPathItem === evt.model.item');\n        this.set('_isDropdownHidden', true);\n        this.set('_clickPathItem', {});\n      } else {\n        console.log('else');\n        this.set('_clickPathItem', dataItem);\n        this.set('_isDropdownHidden', false);\n        this._changeDropdownPosition(evt);\n      }\n      // 1. Check if there are children. \n\n      if (this._doesItemHaveChildren(dataItem)) {\n        this.set('_clickedItemChildren', dataItem.children);\n      }\n      \n      \n        // a. If there are kids, we need to update clickedItemChildren. \n        // b. If not, we fire an event that the clicked on item is the selected context.\n      // 2. If there are children, we need to find the left/top/height of the clicked item, and calculate the positioning of the dropdown accordingly \n    },\n    \n    /**\n     * \n     * @param {Object} clickedItem the clicked item\n     * @return Object that holds the calculated top/left for the dropdown.\n     */\n    extractClickedPathItemPosition(clickedItem) {\n      //TODO extract top/left/height from clickedItem.\n      // then, calculate the new positioning, and save it into an object.\n      // returns an object that holds the new top/left positioning.\n    },\n    /**\n     * \n     * @param {Object} positioning an object which holds the new positioning for the dropdown\n     */\n    _changeDropdownPosition(evt) {\n      var normalizedTarget = this._normalizePathClickTarget(evt),\n          targetRect = normalizedTarget.getBoundingClientRect(),\n          targetLeft = targetRect.left,\n          targetBottom = targetRect.bottom,\n          targetHeight = targetRect.height,\n          windowScrollX = window.scrollX,\n          windowScrollY = window.scrollY,\n          dropdown = Polymer.dom(this.root).querySelector('.breadCrumbdropdown');\n      console.log(targetRect);\n      dropdown.style.top = (targetBottom + windowScrollY + 4) + 'px';\n      dropdown.style.left = targetLeft + windowScrollX + 'px';\n      \n    },\n    /**\n     * This method dispatches a custom event ('px-breadcrumbs-item-clicked') that has the item attached to it.\n     * the 'composed: true' property makes it so the event passes through shadow dom boundaries.\n     * @param {*} item the item that was clicked on.\n     */\n    _notifyClick(item) {\n      //TODO fire an event with the clicked on item.\n      this.dispatchEvent(new CustomEvent('px-breadcrumbs-item-clicked', {item: item, composed: true}));\n    }\n  });\n})();\n"]}